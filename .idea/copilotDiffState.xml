<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Extended Table&#10;&#10;## Description&#10;&#10;Extended Table is a JSF component for Axon.ivy that extends the `p:dataTable` component from PrimeFaces. Its main goal is to provide users with the ability to save the state of a table (such as filters, sorting, pagination, and column order) and restore it at any time and from anywhere within the application. This feature enhances user experience by allowing personalized table views to be persisted and reused.&#10;&#10;## Features&#10;&#10;- Save table state (filters, sorting, pagination, column order, etc.)&#10;- Restore saved table state on demand&#10;- Delete saved states from the list&#10;- Reset the table to its default state&#10;- Seamless integration with Axon.ivy and PrimeFaces&#10;" />
              <option name="updatedContent" value="# Extended Table&#10;&#10;## Description&#10;&#10;Extended Table is a JSF component for Axon.ivy that extends the `p:dataTable` component from PrimeFaces. Its main goal is to provide users with the ability to save the state of a table (such as filters, sorting, pagination, and column order) and restore it at any time and from anywhere within the application. This feature enhances user experience by allowing personalized table views to be persisted and reused.&#10;&#10;In the background, the table state is persisted as a JSON string in the user's session property map.&#10;&#10;## Features&#10;&#10;- Save table state (filters, sorting, pagination, column order, etc.)&#10;- Restore saved table state on demand&#10;- Delete saved states from the list&#10;- Reset the table to its default state&#10;- Seamless integration with Axon.ivy and PrimeFaces" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/daos/CustomerDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/daos/CustomerDAO.java" />
              <option name="originalContent" value="package com.axonivy.market.extendedtable.demo.daos;&#10;&#10;import com.axonivy.market.extendedtable.demo.entities.Customer;&#10;import com.axonivy.market.extendedtable.demo.entities.Customer_;&#10;import com.axonivy.utils.persistence.dao.AuditableIdDAO;&#10;import com.axonivy.utils.persistence.dao.CriteriaQueryContext;&#10;import com.axonivy.utils.persistence.dao.CriteriaQueryGenericContext;&#10;&#10;import org.primefaces.model.FilterMeta;&#10;import org.primefaces.model.SortMeta;&#10;&#10;import javax.persistence.criteria.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class CustomerDAO extends AuditableIdDAO&lt;Customer_, Customer&gt; implements BaseDAO {&#10;&#10;&#9;@Override&#10;&#9;protected Class&lt;Customer&gt; getType() {&#10;&#9;&#9;return Customer.class;&#10;&#9;}&#10;&#10;&#9;private List&lt;Predicate&gt; buildFilterPredicates(Map&lt;String, FilterMeta&gt; filterBy,&#10;&#9;&#9;&#9;From&lt;?, ?&gt; root, CriteriaBuilder cb) {&#10;&#9;&#9;List&lt;Predicate&gt; predicates = new ArrayList&lt;&gt;();&#10;&#9;&#9;if (filterBy != null) {&#10;&#9;&#9;&#9;for (FilterMeta filter : filterBy.values()) {&#10;&#9;&#9;&#9;&#9;Object filterValue = filter.getFilterValue();&#10;&#9;&#9;&#9;&#9;if (filterValue == null || filterValue.toString().trim().isEmpty()) {&#10;&#9;&#9;&#9;&#9;&#9;continue;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;String field = filter.getField();&#10;&#9;&#9;&#9;&#9;Path&lt;?&gt; path = root;&#10;&#9;&#9;&#9;&#9;// Support nested attributes (e.g., &quot;group.name&quot; or &quot;country.name&quot;)&#10;&#9;&#9;&#9;&#9;String[] parts = field.split(&quot;\\.&quot;);&#10;&#9;&#9;&#9;&#9;for (int i = 0; i &lt; parts.length; i++) {&#10;&#9;&#9;&#9;&#9;&#9;if (i == parts.length - 1) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;path = path.get(parts[i]);&#10;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Use join only if not already joined&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (path instanceof From) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;path = ((From&lt;?, ?&gt;) path).join(parts[i], JoinType.LEFT);&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;path = path.get(parts[i]);&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;Class&lt;?&gt; type = path.getJavaType();&#10;&#10;&#9;&#9;&#9;&#9;if (Enum.class.isAssignableFrom(type)) {&#10;&#9;&#9;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;&#9;&#9;@SuppressWarnings(&quot;unchecked&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;Enum&lt;?&gt; enumValue = (filterValue instanceof Enum) ? (Enum&lt;?&gt;) filterValue&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;: Enum.valueOf((Class&lt;Enum&gt;) type, filterValue.toString());&#10;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.equal(path, enumValue));&#10;&#9;&#9;&#9;&#9;&#9;} catch (Exception e) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;// ignore invalid enum filter&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;} else if (Number.class.isAssignableFrom(type)) {&#10;&#9;&#9;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;&#9;&#9;Number number = (filterValue instanceof Number) ? (Number) filterValue&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;: Double.valueOf(filterValue.toString());&#10;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.equal(path, number));&#10;&#9;&#9;&#9;&#9;&#9;} catch (NumberFormatException e) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;// ignore invalid number filter&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;} else if (java.util.Date.class.isAssignableFrom(type)&#10;&#9;&#9;&#9;&#9;&#9;&#9;|| java.time.temporal.Temporal.class.isAssignableFrom(type)) {&#10;&#9;&#9;&#9;&#9;&#9;if (filterValue instanceof Map) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;Map&lt;?, ?&gt; range = (Map&lt;?, ?&gt;) filterValue;&#10;&#9;&#9;&#9;&#9;&#9;&#9;Object from = range.get(&quot;from&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;Object to = range.get(&quot;to&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (from != null) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.greaterThanOrEqualTo(path.as(Comparable.class), (Comparable) from));&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (to != null) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.lessThanOrEqualTo(path.as(Comparable.class), (Comparable) to));&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.equal(path, filterValue));&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;} else if (type == String.class) {&#10;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.like(cb.lower(path.as(String.class)),&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&quot;%&quot; + filterValue.toString().toLowerCase() + &quot;%&quot;));&#10;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.equal(path, filterValue));&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;return predicates;&#10;&#9;}&#10;&#10;&#9;public List&lt;Customer&gt; find(int offset, int pageSize, Map&lt;String, SortMeta&gt; sortBy,&#10;&#9;&#9;&#9;Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;try (CriteriaQueryContext&lt;Customer&gt; ctx = initializeQuery()) {&#10;&#9;&#9;&#9;List&lt;Predicate&gt; predicates = buildFilterPredicates(filterBy, ctx.r, ctx.c);&#10;&#9;&#9;&#9;if (!predicates.isEmpty()) {&#10;&#9;&#9;&#9;&#9;ctx.q.where(ctx.c.and(predicates.toArray(new Predicate[0])));&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Sorting&#10;&#9;&#9;&#9;List&lt;Order&gt; orders = new ArrayList&lt;&gt;();&#10;&#9;&#9;&#9;if (sortBy != null &amp;&amp; !sortBy.isEmpty()) {&#10;&#9;&#9;&#9;&#9;for (SortMeta sortMeta : sortBy.values()) {&#10;&#9;&#9;&#9;&#9;&#9;String field = sortMeta.getField();&#10;&#9;&#9;&#9;&#9;&#9;if (sortMeta.getOrder().isAscending()) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;orders.add(ctx.c.asc(ctx.r.get(field)));&#10;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;orders.add(ctx.c.desc(ctx.r.get(field)));&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if (!orders.isEmpty()) {&#10;&#9;&#9;&#9;&#9;ctx.q.orderBy(orders);&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;ctx.getQuerySettings().withFirstResult(offset).withMaxResults(pageSize);&#10;&#10;&#9;&#9;&#9;return findByCriteria(ctx);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public int count(Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;try (CriteriaQueryGenericContext&lt;Customer,Long&gt; ctx = initializeQuery(getType(), Long.class)) {&#10;&#9;&#9;&#9;List&lt;Predicate&gt; predicates = buildFilterPredicates(filterBy, ctx.r, ctx.c);&#10;&#9;&#9;&#9;if (!predicates.isEmpty()) {&#10;&#9;&#9;&#9;&#9;ctx.q.where(ctx.c.and(predicates.toArray(new Predicate[0])));&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;ctx.q.select(ctx.c.count(ctx.r));&#10;&#9;&#9;&#9;Long count = findByCriteria(ctx).stream().findFirst().orElse(0L);&#10;&#9;&#9;&#9;return count != null ? count.intValue() : 0;&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package com.axonivy.market.extendedtable.demo.daos;&#10;&#10;import com.axonivy.market.extendedtable.demo.entities.Customer;&#10;import com.axonivy.market.extendedtable.demo.entities.Customer_;&#10;import com.axonivy.utils.persistence.dao.AuditableIdDAO;&#10;import com.axonivy.utils.persistence.dao.CriteriaQueryContext;&#10;import com.axonivy.utils.persistence.dao.CriteriaQueryGenericContext;&#10;&#10;import org.primefaces.model.FilterMeta;&#10;import org.primefaces.model.SortMeta;&#10;&#10;import javax.persistence.criteria.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class CustomerDAO extends AuditableIdDAO&lt;Customer_, Customer&gt; implements BaseDAO {&#10;&#10;&#9;@Override&#10;&#9;protected Class&lt;Customer&gt; getType() {&#10;&#9;&#9;return Customer.class;&#10;&#9;}&#10;&#10;&#9;private List&lt;Predicate&gt; buildFilterPredicates(Map&lt;String, FilterMeta&gt; filterBy,&#10;&#9;&#9;&#9;From&lt;?, ?&gt; root, CriteriaBuilder cb) {&#10;&#9;&#9;List&lt;Predicate&gt; predicates = new ArrayList&lt;&gt;();&#10;&#9;&#9;if (filterBy != null) {&#10;&#9;&#9;&#9;for (FilterMeta filter : filterBy.values()) {&#10;&#9;&#9;&#9;&#9;Object filterValue = filter.getFilterValue();&#10;&#9;&#9;&#9;&#9;if (filterValue == null || filterValue.toString().trim().isEmpty()) {&#10;&#9;&#9;&#9;&#9;&#9;continue;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;String field = filter.getField();&#10;&#9;&#9;&#9;&#9;Path&lt;?&gt; path = root;&#10;&#9;&#9;&#9;&#9;// Support nested attributes (e.g., &quot;group.name&quot; or &quot;country.name&quot;)&#10;&#9;&#9;&#9;&#9;String[] parts = field.split(&quot;\\.&quot;);&#10;&#9;&#9;&#9;&#9;for (int i = 0; i &lt; parts.length; i++) {&#10;&#9;&#9;&#9;&#9;&#9;if (i == parts.length - 1) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;path = path.get(parts[i]);&#10;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;// Always join for parent attributes in the path&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (path instanceof From) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;path = ((From&lt;?, ?&gt;) path).join(parts[i], JoinType.LEFT);&#10;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;throw new IllegalArgumentException(&quot;Cannot join on non-From path for: &quot; + parts[i]);&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;Class&lt;?&gt; type = path.getJavaType();&#10;&#10;&#9;&#9;&#9;&#9;if (Enum.class.isAssignableFrom(type)) {&#10;&#9;&#9;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;&#9;&#9;@SuppressWarnings(&quot;unchecked&quot;)&#10;&#9;&#9;&#9;&#9;&#9;&#9;Enum&lt;?&gt; enumValue = (filterValue instanceof Enum) ? (Enum&lt;?&gt;) filterValue&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;: Enum.valueOf((Class&lt;Enum&gt;) type, filterValue.toString());&#10;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.equal(path, enumValue));&#10;&#9;&#9;&#9;&#9;&#9;} catch (Exception e) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;// ignore invalid enum filter&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;} else if (Number.class.isAssignableFrom(type)) {&#10;&#9;&#9;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;&#9;&#9;Number number = (filterValue instanceof Number) ? (Number) filterValue&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;: Double.valueOf(filterValue.toString());&#10;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.equal(path, number));&#10;&#9;&#9;&#9;&#9;&#9;} catch (NumberFormatException e) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;// ignore invalid number filter&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;} else if (java.util.Date.class.isAssignableFrom(type)&#10;&#9;&#9;&#9;&#9;&#9;&#9;|| java.time.temporal.Temporal.class.isAssignableFrom(type)) {&#10;&#9;&#9;&#9;&#9;&#9;if (filterValue instanceof Map) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;Map&lt;?, ?&gt; range = (Map&lt;?, ?&gt;) filterValue;&#10;&#9;&#9;&#9;&#9;&#9;&#9;Object from = range.get(&quot;from&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;Object to = range.get(&quot;to&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (from != null) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.greaterThanOrEqualTo(path.as(Comparable.class), (Comparable) from));&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (to != null) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.lessThanOrEqualTo(path.as(Comparable.class), (Comparable) to));&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.equal(path, filterValue));&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;} else if (type == String.class) {&#10;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.like(cb.lower(path.as(String.class)),&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&quot;%&quot; + filterValue.toString().toLowerCase() + &quot;%&quot;));&#10;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;predicates.add(cb.equal(path, filterValue));&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;return predicates;&#10;&#9;}&#10;&#10;&#9;public List&lt;Customer&gt; find(int offset, int pageSize, Map&lt;String, SortMeta&gt; sortBy,&#10;&#9;&#9;&#9;Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;try (CriteriaQueryContext&lt;Customer&gt; ctx = initializeQuery()) {&#10;&#9;&#9;&#9;List&lt;Predicate&gt; predicates = buildFilterPredicates(filterBy, ctx.r, ctx.c);&#10;&#9;&#9;&#9;if (!predicates.isEmpty()) {&#10;&#9;&#9;&#9;&#9;ctx.q.where(ctx.c.and(predicates.toArray(new Predicate[0])));&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Sorting&#10;&#9;&#9;&#9;List&lt;Order&gt; orders = new ArrayList&lt;&gt;();&#10;&#9;&#9;&#9;if (sortBy != null &amp;&amp; !sortBy.isEmpty()) {&#10;&#9;&#9;&#9;&#9;for (SortMeta sortMeta : sortBy.values()) {&#10;&#9;&#9;&#9;&#9;&#9;String field = sortMeta.getField();&#10;&#9;&#9;&#9;&#9;&#9;if (sortMeta.getOrder().isAscending()) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;orders.add(ctx.c.asc(ctx.r.get(field)));&#10;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;orders.add(ctx.c.desc(ctx.r.get(field)));&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if (!orders.isEmpty()) {&#10;&#9;&#9;&#9;&#9;ctx.q.orderBy(orders);&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;ctx.getQuerySettings().withFirstResult(offset).withMaxResults(pageSize);&#10;&#10;&#9;&#9;&#9;return findByCriteria(ctx);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public int count(Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;try (CriteriaQueryGenericContext&lt;Customer,Long&gt; ctx = initializeQuery(getType(), Long.class)) {&#10;&#9;&#9;&#9;List&lt;Predicate&gt; predicates = buildFilterPredicates(filterBy, ctx.r, ctx.c);&#10;&#9;&#9;&#9;if (!predicates.isEmpty()) {&#10;&#9;&#9;&#9;&#9;ctx.q.where(ctx.c.and(predicates.toArray(new Predicate[0])));&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;ctx.q.select(ctx.c.count(ctx.r));&#10;&#9;&#9;&#9;Long count = findByCriteria(ctx).stream().findFirst().orElse(0L);&#10;&#9;&#9;&#9;return count != null ? count.intValue() : 0;&#10;&#9;&#9;}&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/entities/Customer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/entities/Customer.java" />
              <option name="originalContent" value="package com.axonivy.market.extendedtable.demo.entities;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Objects;&#10;&#10;import javax.persistence.Entity;&#10;&#10;import com.axonivy.utils.persistence.beans.AuditableIdEntity;&#10;&#10;@Entity&#10;public class Customer extends AuditableIdEntity {&#10;&#10;&#9;private static final long serialVersionUID = 1L;&#10;&#10;&#9;private String name;&#10;&#9;private String company;&#10;&#9;private Country country;&#10;&#9;private LocalDate date;&#10;&#9;private CustomerStatus status;&#10;&#9;private int activity;&#10;&#9;private Representative representative;&#10;&#10;&#9;public Customer() {&#10;&#9;}&#10;&#10;&#9;public Customer(int id, String name, String company, Country country, LocalDate date, CustomerStatus status,&#10;&#9;&#9;&#9;int activity, Representative representative) {&#10;&#9;&#9;this.name = name;&#10;&#9;&#9;this.company = company;&#10;&#9;&#9;this.country = country;&#10;&#9;&#9;this.date = date;&#10;&#9;&#9;this.status = status;&#10;&#9;&#9;this.activity = activity;&#10;&#9;&#9;this.representative = representative;&#10;&#9;}&#10;&#10;&#9;public String getName() {&#10;&#9;&#9;return name;&#10;&#9;}&#10;&#10;&#9;public void setName(String name) {&#10;&#9;&#9;this.name = name;&#10;&#9;}&#10;&#10;&#9;public String getCompany() {&#10;&#9;&#9;return company;&#10;&#9;}&#10;&#10;&#9;public void setCompany(String company) {&#10;&#9;&#9;this.company = company;&#10;&#9;}&#10;&#10;&#9;public Country getCountry() {&#10;&#9;&#9;return country;&#10;&#9;}&#10;&#10;&#9;public void setCountry(Country country) {&#10;&#9;&#9;this.country = country;&#10;&#9;}&#10;&#10;&#9;public LocalDate getDate() {&#10;&#9;&#9;return date;&#10;&#9;}&#10;&#10;&#9;public void setDate(LocalDate date) {&#10;&#9;&#9;this.date = date;&#10;&#9;}&#10;&#10;&#9;public CustomerStatus getStatus() {&#10;&#9;&#9;return status;&#10;&#9;}&#10;&#10;&#9;public void setStatus(CustomerStatus status) {&#10;&#9;&#9;this.status = status;&#10;&#9;}&#10;&#10;&#9;public int getActivity() {&#10;&#9;&#9;return activity;&#10;&#9;}&#10;&#10;&#9;public void setActivity(int activity) {&#10;&#9;&#9;this.activity = activity;&#10;&#9;}&#10;&#10;&#9;public Representative getRepresentative() {&#10;&#9;&#9;return representative;&#10;&#9;}&#10;&#10;&#9;public void setRepresentative(Representative representative) {&#10;&#9;&#9;this.representative = representative;&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public boolean equals(Object o) {&#10;&#9;&#9;if (this == o) {&#10;&#9;&#9;&#9;return true;&#10;&#9;&#9;}&#10;&#9;&#9;if (o == null || getClass() != o.getClass()) {&#10;&#9;&#9;&#9;return false;&#10;&#9;&#9;}&#10;&#9;&#9;Customer customer = (Customer) o;&#10;&#9;&#9;return id == customer.id &amp;&amp; activity == customer.activity &amp;&amp; Objects.equals(name, customer.name)&#10;&#9;&#9;&#9;&#9;&amp;&amp; Objects.equals(company, customer.company) &amp;&amp; Objects.equals(country, customer.country)&#10;&#9;&#9;&#9;&#9;&amp;&amp; Objects.equals(date, customer.date) &amp;&amp; status == customer.status&#10;&#9;&#9;&#9;&#9;&amp;&amp; Objects.equals(representative, customer.representative);&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public int hashCode() {&#10;&#9;&#9;return Objects.hash(id, name, company, country, date, status, activity, representative);&#10;&#9;}&#10;}" />
              <option name="updatedContent" value="package com.axonivy.market.extendedtable.demo.entities;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Objects;&#10;&#10;import javax.persistence.Entity;&#10;import javax.persistence.ManyToOne;&#10;import javax.persistence.JoinColumn;&#10;&#10;import com.axonivy.utils.persistence.beans.AuditableIdEntity;&#10;&#10;@Entity&#10;public class Customer extends AuditableIdEntity {&#10;&#10;&#9;private static final long serialVersionUID = 1L;&#10;&#10;&#9;private String name;&#10;&#9;private String company;&#10;&#9;private Country country;&#10;&#9;private LocalDate date;&#10;&#9;private CustomerStatus status;&#10;&#9;private int activity;&#10;&#9;private Representative representative;&#10;&#10;&#9;@ManyToOne&#10;&#9;@JoinColumn(name = &quot;group_id&quot;)&#10;&#9;private CustomerGroup group;&#10;&#10;&#9;public Customer() {&#10;&#9;}&#10;&#10;&#9;public Customer(int id, String name, String company, Country country, LocalDate date, CustomerStatus status,&#10;&#9;&#9;&#9;int activity, Representative representative) {&#10;&#9;&#9;this.name = name;&#10;&#9;&#9;this.company = company;&#10;&#9;&#9;this.country = country;&#10;&#9;&#9;this.date = date;&#10;&#9;&#9;this.status = status;&#10;&#9;&#9;this.activity = activity;&#10;&#9;&#9;this.representative = representative;&#10;&#9;}&#10;&#10;&#9;public String getName() {&#10;&#9;&#9;return name;&#10;&#9;}&#10;&#10;&#9;public void setName(String name) {&#10;&#9;&#9;this.name = name;&#10;&#9;}&#10;&#10;&#9;public String getCompany() {&#10;&#9;&#9;return company;&#10;&#9;}&#10;&#10;&#9;public void setCompany(String company) {&#10;&#9;&#9;this.company = company;&#10;&#9;}&#10;&#10;&#9;public Country getCountry() {&#10;&#9;&#9;return country;&#10;&#9;}&#10;&#10;&#9;public void setCountry(Country country) {&#10;&#9;&#9;this.country = country;&#10;&#9;}&#10;&#10;&#9;public LocalDate getDate() {&#10;&#9;&#9;return date;&#10;&#9;}&#10;&#10;&#9;public void setDate(LocalDate date) {&#10;&#9;&#9;this.date = date;&#10;&#9;}&#10;&#10;&#9;public CustomerStatus getStatus() {&#10;&#9;&#9;return status;&#10;&#9;}&#10;&#10;&#9;public void setStatus(CustomerStatus status) {&#10;&#9;&#9;this.status = status;&#10;&#9;}&#10;&#10;&#9;public int getActivity() {&#10;&#9;&#9;return activity;&#10;&#9;}&#10;&#10;&#9;public void setActivity(int activity) {&#10;&#9;&#9;this.activity = activity;&#10;&#9;}&#10;&#10;&#9;public Representative getRepresentative() {&#10;&#9;&#9;return representative;&#10;&#9;}&#10;&#10;&#9;public void setRepresentative(Representative representative) {&#10;&#9;&#9;this.representative = representative;&#10;&#9;}&#10;&#10;&#9;public CustomerGroup getGroup() {&#10;&#9;&#9;return group;&#10;&#9;}&#10;&#10;&#9;public void setGroup(CustomerGroup group) {&#10;&#9;&#9;this.group = group;&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public boolean equals(Object o) {&#10;&#9;&#9;if (this == o) {&#10;&#9;&#9;&#9;return true;&#10;&#9;&#9;}&#10;&#9;&#9;if (o == null || getClass() != o.getClass()) {&#10;&#9;&#9;&#9;return false;&#10;&#9;&#9;}&#10;&#9;&#9;Customer customer = (Customer) o;&#10;&#9;&#9;return id == customer.id &amp;&amp; activity == customer.activity &amp;&amp; Objects.equals(name, customer.name)&#10;&#9;&#9;&#9;&#9;&amp;&amp; Objects.equals(company, customer.company) &amp;&amp; Objects.equals(country, customer.country)&#10;&#9;&#9;&#9;&#9;&amp;&amp; Objects.equals(date, customer.date) &amp;&amp; status == customer.status&#10;&#9;&#9;&#9;&#9;&amp;&amp; Objects.equals(representative, customer.representative);&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public int hashCode() {&#10;&#9;&#9;return Objects.hash(id, name, company, country, date, status, activity, representative);&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/entities/CustomerGroup.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/entities/CustomerGroup.java" />
              <option name="originalContent" value="package com.axonivy.market.extendedtable.demo.entities;&#10;&#10;import com.axonivy.utils.persistence.beans.AuditableIdEntity;&#10;&#10;import javax.persistence.Entity;&#10;import javax.persistence.OneToMany;&#10;import javax.persistence.CascadeType;&#10;import javax.persistence.FetchType;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;&#10;@Entity&#10;public class CustomerGroup extends AuditableIdEntity {&#10;&#10;&#9;private static final long serialVersionUID = 1L;&#10;&#10;&#9;private String name;&#10;&#10;&#9;@OneToMany(mappedBy = &quot;group&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;&#9;private List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#10;&#10;&#9;public CustomerGroup() {}&#10;&#10;&#9;public CustomerGroup(String name) {&#10;&#9;&#9;this.name = name;&#10;&#9;}&#10;&#10;&#9;public String getName() {&#10;&#9;&#9;return name;&#10;&#9;}&#10;&#10;&#9;public void setName(String name) {&#10;&#9;&#9;this.name = name;&#10;&#9;}&#10;&#10;&#9;public List&lt;Customer&gt; getCustomers() {&#10;&#9;&#9;return customers;&#10;&#9;}&#10;&#10;&#9;public void setCustomers(List&lt;Customer&gt; customers) {&#10;&#9;&#9;this.customers = customers;&#10;&#9;}&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.axonivy.market.extendedtable.demo.entities;&#10;&#10;import com.axonivy.utils.persistence.beans.AuditableIdEntity;&#10;&#10;import javax.persistence.Entity;&#10;import javax.persistence.OneToMany;&#10;import javax.persistence.CascadeType;&#10;import javax.persistence.FetchType;&#10;import javax.persistence.Column;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;&#10;@Entity&#10;public class CustomerGroup extends AuditableIdEntity {&#10;&#10;&#9;private static final long serialVersionUID = 1L;&#10;&#10;&#9;private String name;&#10;&#10;&#9;@Column(length = 512)&#10;&#9;private String description;&#10;&#10;&#9;private LocalDate createdDate;&#10;&#10;&#9;private boolean active;&#10;&#10;&#9;@OneToMany(mappedBy = &quot;group&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;&#9;private List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#10;&#10;&#9;public CustomerGroup() {}&#10;&#10;&#9;public CustomerGroup(String name) {&#10;&#9;&#9;this.name = name;&#10;&#9;&#9;this.active = true;&#10;&#9;&#9;this.createdDate = LocalDate.now();&#10;&#9;}&#10;&#10;&#9;public String getName() {&#10;&#9;&#9;return name;&#10;&#9;}&#10;&#10;&#9;public void setName(String name) {&#10;&#9;&#9;this.name = name;&#10;&#9;}&#10;&#10;&#9;public String getDescription() {&#10;&#9;&#9;return description;&#10;&#9;}&#10;&#10;&#9;public void setDescription(String description) {&#10;&#9;&#9;this.description = description;&#10;&#9;}&#10;&#10;&#9;public LocalDate getCreatedDate() {&#10;&#9;&#9;return createdDate;&#10;&#9;}&#10;&#10;&#9;public void setCreatedDate(LocalDate createdDate) {&#10;&#9;&#9;this.createdDate = createdDate;&#10;&#9;}&#10;&#10;&#9;public boolean isActive() {&#10;&#9;&#9;return active;&#10;&#9;}&#10;&#10;&#9;public void setActive(boolean active) {&#10;&#9;&#9;this.active = active;&#10;&#9;}&#10;&#10;&#9;public List&lt;Customer&gt; getCustomers() {&#10;&#9;&#9;return customers;&#10;&#9;}&#10;&#10;&#9;public void setCustomers(List&lt;Customer&gt; customers) {&#10;&#9;&#9;this.customers = customers;&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/model/LazyCustomerDataModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/model/LazyCustomerDataModel.java" />
              <option name="originalContent" value="package com.axonivy.market.extendedtable.demo.model;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Collection;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.stream.Collectors;&#10;&#10;import javax.faces.context.FacesContext;&#10;&#10;import org.apache.commons.collections4.ComparatorUtils;&#10;import org.primefaces.model.FilterMeta;&#10;import org.primefaces.model.LazyDataModel;&#10;import org.primefaces.model.SortMeta;&#10;import org.primefaces.model.filter.FilterConstraint;&#10;import org.primefaces.util.LocaleUtils;&#10;&#10;import com.axonivy.market.extendedtable.demo.daos.CustomerDAO;&#10;import com.axonivy.market.extendedtable.demo.entities.Customer;&#10;import com.axonivy.market.extendedtable.utils.ObjectUtil;&#10;&#10;&#10;public class LazyCustomerDataModel extends LazyDataModel&lt;Customer&gt; {&#10;&#10;&#9;private static final long serialVersionUID = 1L;&#10;&#10;&#10;&#9;private CustomerDAO customerDAO;&#10;&#10;&#9;public LazyCustomerDataModel(List&lt;Customer&gt; datasource, CustomerDAO customerDAO) {&#10;&#9;&#9;this.customerDAO = customerDAO;&#10;&#9;}&#10;&#10;&#9;public LazyCustomerDataModel(CustomerDAO customerDAO) {&#10;&#9;&#9;this.customerDAO = customerDAO;&#10;&#9;}&#10;&#10;&#9;public LazyCustomerDataModel() {&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public Customer getRowData(String rowKey) {&#10;&#9;&#9;return customerDAO.findById(rowKey);&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public String getRowKey(Customer customer) {&#10;&#9;&#9;return String.valueOf(customer.getId());&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public int count(Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;return (int) datasource.stream().filter(o -&gt; filter(FacesContext.getCurrentInstance(), filterBy.values(), o))&#10;&#9;&#9;&#9;&#9;.count();&#10;&#9;}&#10;&#10;&#9;private boolean filter(FacesContext context, Collection&lt;FilterMeta&gt; filterBy, Object o) {&#10;&#9;&#9;boolean matching = true;&#10;&#10;&#9;&#9;for (FilterMeta filter : filterBy) {&#10;&#9;&#9;&#9;FilterConstraint constraint = filter.getConstraint();&#10;&#9;&#9;&#9;Object filterValue = filter.getFilterValue();&#10;&#10;&#9;&#9;&#9;Object columnValue = String.valueOf(ObjectUtil.getPropertyValueViaReflection(o, filter.getField()));&#10;&#9;&#9;&#9;matching = constraint.isMatching(context, columnValue, filterValue, LocaleUtils.getCurrentLocale());&#10;&#10;&#9;&#9;&#9;if (!matching) {&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return matching;&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public List&lt;Customer&gt; load(int offset, int pageSize, Map&lt;String, SortMeta&gt; sortBy,&#10;&#9;&#9;&#9;Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;// Use DAO for lazy loading, following the DAO pattern&#10;&#9;&#9;List&lt;Customer&gt; result = customerDAO.find(offset, pageSize, sortBy, filterBy);&#10;&#9;&#9;this.setRowCount(customerDAO.count(filterBy));&#10;&#9;&#9;return result;&#10;&#9;}&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.axonivy.market.extendedtable.demo.model;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Collection;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.stream.Collectors;&#10;&#10;import javax.faces.context.FacesContext;&#10;&#10;import org.apache.commons.collections4.ComparatorUtils;&#10;import org.primefaces.model.FilterMeta;&#10;import org.primefaces.model.LazyDataModel;&#10;import org.primefaces.model.SortMeta;&#10;import org.primefaces.model.filter.FilterConstraint;&#10;import org.primefaces.util.LocaleUtils;&#10;&#10;import com.axonivy.market.extendedtable.demo.daos.CustomerDAO;&#10;import com.axonivy.market.extendedtable.demo.entities.Customer;&#10;import com.axonivy.market.extendedtable.utils.ObjectUtil;&#10;&#10;&#10;public class LazyCustomerDataModel extends LazyDataModel&lt;Customer&gt; {&#10;&#10;&#9;private static final long serialVersionUID = 1L;&#10;&#10;&#10;&#9;private CustomerDAO customerDAO;&#10;&#10;&#9;public LazyCustomerDataModel(List&lt;Customer&gt; datasource, CustomerDAO customerDAO) {&#10;&#9;&#9;this.customerDAO = customerDAO;&#10;&#9;}&#10;&#10;&#9;public LazyCustomerDataModel(CustomerDAO customerDAO) {&#10;&#9;&#9;this.customerDAO = customerDAO;&#10;&#9;}&#10;&#10;&#9;public LazyCustomerDataModel() {&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public Customer getRowData(String rowKey) {&#10;&#9;&#9;return customerDAO.findById(rowKey);&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public String getRowKey(Customer customer) {&#10;&#9;&#9;return String.valueOf(customer.getId());&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public int count(Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;return customerDAO.count(filterBy);&#10;&#9;}&#10;&#10;&#9;private boolean filter(FacesContext context, Collection&lt;FilterMeta&gt; filterBy, Object o) {&#10;&#9;&#9;boolean matching = true;&#10;&#10;&#9;&#9;for (FilterMeta filter : filterBy) {&#10;&#9;&#9;&#9;FilterConstraint constraint = filter.getConstraint();&#10;&#9;&#9;&#9;Object filterValue = filter.getFilterValue();&#10;&#10;&#9;&#9;&#9;Object columnValue = String.valueOf(ObjectUtil.getPropertyValueViaReflection(o, filter.getField()));&#10;&#9;&#9;&#9;matching = constraint.isMatching(context, columnValue, filterValue, LocaleUtils.getCurrentLocale());&#10;&#10;&#9;&#9;&#9;if (!matching) {&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return matching;&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public List&lt;Customer&gt; load(int offset, int pageSize, Map&lt;String, SortMeta&gt; sortBy,&#10;&#9;&#9;&#9;Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;// Use DAO for lazy loading, following the DAO pattern&#10;&#9;&#9;List&lt;Customer&gt; result = customerDAO.find(offset, pageSize, sortBy, filterBy);&#10;&#9;&#9;this.setRowCount(customerDAO.count(filterBy));&#10;&#9;&#9;return result;&#10;&#9;}&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/service/CustomerService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table-demo/src/com/axonivy/market/extendedtable/demo/service/CustomerService.java" />
              <option name="originalContent" value="package com.axonivy.market.extendedtable.demo.service;&#10;&#10;import java.security.SecureRandom;&#10;import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Random;&#10;import java.util.concurrent.ThreadLocalRandom;&#10;&#10;import javax.transaction.TransactionRolledbackException;&#10;&#10;import org.primefaces.util.Constants;&#10;&#10;import com.axonivy.market.extendedtable.demo.daos.CustomerDAO;&#10;import com.axonivy.market.extendedtable.demo.entities.Country;&#10;import com.axonivy.market.extendedtable.demo.entities.Customer;&#10;import com.axonivy.market.extendedtable.demo.entities.CustomerStatus;&#10;&#10;import ch.ivyteam.ivy.environment.Ivy;&#10;&#10;public class CustomerService {&#10;&#10;&#9;private Random random = new SecureRandom();&#10;&#9;private Country[] countries;&#10;&#9;private String[] firstNames;&#10;&#9;private String[] lastNames;&#10;&#9;private String[] companies;&#10;&#10;&#9;private CustomerDAO customerDAO = new CustomerDAO();&#10;&#10;&#9;{&#10;&#9;&#9;countries = new Country[] { new Country(0, &quot;Argentina&quot;, &quot;ar&quot;), new Country(1, &quot;Australia&quot;, &quot;au&quot;),&#10;&#9;&#9;&#9;&#9;new Country(2, &quot;Brazil&quot;, &quot;br&quot;), new Country(3, &quot;Canada&quot;, &quot;ca&quot;), new Country(4, &quot;Germany&quot;, &quot;de&quot;),&#10;&#9;&#9;&#9;&#9;new Country(5, &quot;France&quot;, &quot;fr&quot;), new Country(6, &quot;India&quot;, &quot;in&quot;), new Country(7, &quot;Italy&quot;, &quot;it&quot;),&#10;&#9;&#9;&#9;&#9;new Country(8, &quot;Japan&quot;, &quot;jp&quot;), new Country(9, &quot;Russia&quot;, &quot;ru&quot;), new Country(10, &quot;Spain&quot;, &quot;es&quot;),&#10;&#9;&#9;&#9;&#9;new Country(11, &quot;United Kingdom&quot;, &quot;gb&quot;) };&#10;&#10;&#9;&#9;companies = new String[] { &quot;Benton, John B Jr&quot;, &quot;Chanay, Jeffrey A Esq&quot;, &quot;Chemel, James L Cpa&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Feltz Printing Service&quot;, &quot;Printing Dimensions&quot;, &quot;Chapman, Ross E Esq&quot;, &quot;Morlong Associates&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Commercial Press&quot;, &quot;Truhlar And Truhlar Attys&quot;, &quot;King, Christopher A Esq&quot;, &quot;Dorl, James J Esq&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Rangoni Of Florence&quot;, &quot;Feiner Bros&quot;, &quot;Buckley Miller Wright&quot;, &quot;Rousseaux, Michael Esq&quot; };&#10;&#10;&#9;&#9;&#10;&#10;&#9;&#9;firstNames = new String[] { &quot;James&quot;, &quot;David&quot;, &quot;Jeanfrancois&quot;, &quot;Ivar&quot;, &quot;Tony&quot;, &quot;Adams&quot;, &quot;Claire&quot;, &quot;Costa&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Juan&quot;, &quot;Maria&quot;, &quot;Jennifer&quot;, &quot;Stacey&quot;, &quot;Leja&quot;, &quot;Morrow&quot;, &quot;Arvin&quot;, &quot;Darci&quot;, &quot;Izzy&quot;, &quot;Ricardo&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Clifford&quot;, &quot;Emily&quot;, &quot;Kadeem&quot;, &quot;Mujtaba&quot;, &quot;Aika&quot;, &quot;Mayumi&quot;, &quot;Misaki&quot;, &quot;Silvio&quot;, &quot;Nicolas&quot;, &quot;Antonio&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Deepesh&quot;, &quot;Aditya&quot;, &quot;Aruna&quot;, &quot;Jones&quot;, &quot;Julie&quot;, &quot;Smith&quot;, &quot;Johnson&quot;, &quot;Francesco&quot;, &quot;Salvatore&quot;, &quot;Kaitlin&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Faith&quot;, &quot;Maisha&quot;, &quot;Jefferson&quot;, &quot;Leon&quot;, &quot;Rodrigues&quot;, &quot;Alejandro&quot;, &quot;Munro&quot;, &quot;Cody&quot;, &quot;Chavez&quot;, &quot;Sinclair&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Isabel&quot;, &quot;Octavia&quot;, &quot;Murillo&quot;, &quot;Greenwood&quot;, &quot;Wickens&quot;, &quot;Ashley&quot; };&#10;&#9;&#9;lastNames = new String[] { &quot;Butt&quot;, &quot;Darakjy&quot;, &quot;Venere&quot;, &quot;Paprocki&quot;, &quot;Foller&quot;, &quot;Morasca&quot;, &quot;Tollner&quot;, &quot;Dilliard&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Wieser&quot;, &quot;Marrier&quot;, &quot;Amigon&quot;, &quot;Maclead&quot;, &quot;Caldarera&quot;, &quot;Ruta&quot;, &quot;Albares&quot;, &quot;Poquette&quot;, &quot;Garufi&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Gaucho&quot;, &quot;Rim&quot;, &quot;Whobrey&quot;, &quot;Flosi&quot;, &quot;Nicka&quot;, &quot;Inouye&quot;, &quot;Kolmetz&quot;, &quot;Royster&quot;, &quot;Slusarski&quot;, &quot;Iturbide&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Caudy&quot;, &quot;Chui&quot;, &quot;Kusko&quot;, &quot;Figeroa&quot;, &quot;Vocelka&quot;, &quot;Stenseth&quot;, &quot;Glick&quot;, &quot;Sergi&quot;, &quot;Shinko&quot;, &quot;Stockham&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Ostrosky&quot;, &quot;Gillian&quot;, &quot;Rulapaugh&quot;, &quot;Schemmer&quot;, &quot;Oldroyd&quot;, &quot;Campain&quot;, &quot;Perin&quot;, &quot;Ferencz&quot;, &quot;Saylors&quot;,&#10;&#9;&#9;&#9;&#9;&quot;Briddick&quot;, &quot;Waycott&quot;, &quot;Bowley&quot;, &quot;Malet&quot;, &quot;Malet&quot;, &quot;Bolognia&quot;, &quot;Nestle&quot;, &quot;Doe&quot; };&#10;&#9;}&#10;&#10;&#9;public void initCustomersIfNotExisting(int number) {&#10;&#9;&#9;if (!customerDAO.findAll().isEmpty()) {&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#10;&#9;&#9;for (int i = 0; i &lt; number; i++) {&#10;&#9;&#9;&#9;customers.add(new Customer(i + 1000, getName(), getCompany(), getCountry(), getDate(),&#10;&#9;&#9;&#9;&#9;&#9;CustomerStatus.random(), getActivity()));&#10;&#9;&#9;}&#10;&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;customers = customerDAO.saveAll(customers);&#10;&#9;&#9;&#9;Ivy.log().info(&quot;INIT COMPLETED: Records: &quot; + customers.size());&#10;&#9;&#9;} catch (TransactionRolledbackException e) {&#10;&#9;&#9;&#9;Ivy.log().error(e);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public List&lt;Country&gt; getCountries() {&#10;&#9;&#9;return Arrays.asList(countries);&#10;&#9;}&#10;&#10;&#9;public CustomerStatus[] getCustomerStatus() {&#10;&#9;&#9;return CustomerStatus.values();&#10;&#9;}&#10;&#10;&#9;private String getName() {&#10;&#9;&#9;return firstNames[random.nextInt(firstNames.length)] + Constants.SPACE + (char) (random.nextInt(26) + 'A')&#10;&#9;&#9;&#9;&#9;+ Constants.SPACE + lastNames[random.nextInt(lastNames.length)];&#10;&#9;}&#10;&#10;&#9;private Country getCountry() {&#10;&#9;&#9;return countries[random.nextInt(countries.length)];&#10;&#9;}&#10;&#10;&#9;private String getCompany() {&#10;&#9;&#9;return companies[random.nextInt(companies.length)];&#10;&#9;}&#10;&#10;&#9;private LocalDate getDate() {&#10;&#9;&#9;LocalDate now = LocalDate.now();&#10;&#9;&#9;long randomDay = ThreadLocalRandom.current().nextLong(now.minusDays(30).toEpochDay(), now.toEpochDay());&#10;&#9;&#9;return LocalDate.ofEpochDay(randomDay);&#10;&#9;}&#10;&#10;&#9;private int getActivity() {&#10;&#9;&#9;return random.nextInt(100);&#10;&#9;}&#10;&#10;&#9;public List&lt;Customer&gt; findAll() {&#10;&#9;&#9;return customerDAO.findAll();&#10;&#9;}&#10;}" />
              <option name="updatedContent" value="package com.axonivy.market.extendedtable.demo.service;&#13;&#10;&#13;&#10;import java.security.SecureRandom;&#13;&#10;import java.time.LocalDate;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.Arrays;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Random;&#13;&#10;import java.util.concurrent.ThreadLocalRandom;&#13;&#10;&#13;&#10;import javax.transaction.TransactionRolledbackException;&#13;&#10;&#13;&#10;import org.primefaces.util.Constants;&#13;&#10;&#13;&#10;import com.axonivy.market.extendedtable.demo.daos.CustomerDAO;&#13;&#10;import com.axonivy.market.extendedtable.demo.entities.Country;&#13;&#10;import com.axonivy.market.extendedtable.demo.entities.Customer;&#13;&#10;import com.axonivy.market.extendedtable.demo.entities.CustomerGroup;&#13;&#10;import com.axonivy.market.extendedtable.demo.entities.CustomerStatus;&#13;&#10;&#13;&#10;import ch.ivyteam.ivy.environment.Ivy;&#13;&#10;&#13;&#10;public class CustomerService {&#13;&#10;&#13;&#10;&#9;private Random random = new SecureRandom();&#13;&#10;&#9;private Country[] countries;&#13;&#10;&#9;private String[] firstNames;&#13;&#10;&#9;private String[] lastNames;&#13;&#10;&#9;private String[] companies;&#13;&#10;&#13;&#10;&#9;private CustomerDAO customerDAO = new CustomerDAO();&#13;&#10;&#13;&#10;&#9;{&#13;&#10;&#9;&#9;countries = new Country[] { new Country(0, &quot;Argentina&quot;, &quot;ar&quot;), new Country(1, &quot;Australia&quot;, &quot;au&quot;),&#13;&#10;&#9;&#9;&#9;&#9;new Country(2, &quot;Brazil&quot;, &quot;br&quot;), new Country(3, &quot;Canada&quot;, &quot;ca&quot;), new Country(4, &quot;Germany&quot;, &quot;de&quot;),&#13;&#10;&#9;&#9;&#9;&#9;new Country(5, &quot;France&quot;, &quot;fr&quot;), new Country(6, &quot;India&quot;, &quot;in&quot;), new Country(7, &quot;Italy&quot;, &quot;it&quot;),&#13;&#10;&#9;&#9;&#9;&#9;new Country(8, &quot;Japan&quot;, &quot;jp&quot;), new Country(9, &quot;Russia&quot;, &quot;ru&quot;), new Country(10, &quot;Spain&quot;, &quot;es&quot;),&#13;&#10;&#9;&#9;&#9;&#9;new Country(11, &quot;United Kingdom&quot;, &quot;gb&quot;) };&#13;&#10;&#13;&#10;&#9;&#9;companies = new String[] { &quot;Benton, John B Jr&quot;, &quot;Chanay, Jeffrey A Esq&quot;, &quot;Chemel, James L Cpa&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Feltz Printing Service&quot;, &quot;Printing Dimensions&quot;, &quot;Chapman, Ross E Esq&quot;, &quot;Morlong Associates&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Commercial Press&quot;, &quot;Truhlar And Truhlar Attys&quot;, &quot;King, Christopher A Esq&quot;, &quot;Dorl, James J Esq&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Rangoni Of Florence&quot;, &quot;Feiner Bros&quot;, &quot;Buckley Miller Wright&quot;, &quot;Rousseaux, Michael Esq&quot; };&#13;&#10;&#13;&#10;&#9;&#9;&#13;&#10;&#13;&#10;&#9;&#9;firstNames = new String[] { &quot;James&quot;, &quot;David&quot;, &quot;Jeanfrancois&quot;, &quot;Ivar&quot;, &quot;Tony&quot;, &quot;AdAMS&quot;, &quot;Claire&quot;, &quot;Costa&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Juan&quot;, &quot;Maria&quot;, &quot;Jennifer&quot;, &quot;Stacey&quot;, &quot;Leja&quot;, &quot;Morrow&quot;, &quot;Arvin&quot;, &quot;Darci&quot;, &quot;Izzy&quot;, &quot;Ricardo&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Clifford&quot;, &quot;Emily&quot;, &quot;Kadeem&quot;, &quot;Mujtaba&quot;, &quot;Aika&quot;, &quot;Mayumi&quot;, &quot;Misaki&quot;, &quot;Silvio&quot;, &quot;Nicolas&quot;, &quot;Antonio&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Deepesh&quot;, &quot;Aditya&quot;, &quot;Aruna&quot;, &quot;Jones&quot;, &quot;Julie&quot;, &quot;Smith&quot;, &quot;Johnson&quot;, &quot;Francesco&quot;, &quot;Salvatore&quot;, &quot;Kaitlin&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Faith&quot;, &quot;Maisha&quot;, &quot;Jefferson&quot;, &quot;Leon&quot;, &quot;Rodrigues&quot;, &quot;Alejandro&quot;, &quot;Munro&quot;, &quot;Cody&quot;, &quot;Chavez&quot;, &quot;Sinclair&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Isabel&quot;, &quot;Octavia&quot;, &quot;Murillo&quot;, &quot;Greenwood&quot;, &quot;Wickens&quot;, &quot;Ashley&quot; };&#13;&#10;&#9;&#9;lastNames = new String[] { &quot;Butt&quot;, &quot;Darakjy&quot;, &quot;Venere&quot;, &quot;Paprocki&quot;, &quot;Foller&quot;, &quot;Morasca&quot;, &quot;Tollner&quot;, &quot;Dilliard&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Wieser&quot;, &quot;Marrier&quot;, &quot;Amigon&quot;, &quot;Maclead&quot;, &quot;Caldarera&quot;, &quot;Ruta&quot;, &quot;Albares&quot;, &quot;Poquette&quot;, &quot;Garufi&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Gaucho&quot;, &quot;Rim&quot;, &quot;Whobrey&quot;, &quot;Flosi&quot;, &quot;Nicka&quot;, &quot;Inouye&quot;, &quot;Kolmetz&quot;, &quot;Royster&quot;, &quot;Slusarski&quot;, &quot;Iturbide&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Caudy&quot;, &quot;Chui&quot;, &quot;Kusko&quot;, &quot;Figeroa&quot;, &quot;Vocelka&quot;, &quot;Stenseth&quot;, &quot;Glick&quot;, &quot;Sergi&quot;, &quot;Shinko&quot;, &quot;Stockham&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Ostrosky&quot;, &quot;Gillian&quot;, &quot;Rulapaugh&quot;, &quot;Schemmer&quot;, &quot;Oldroyd&quot;, &quot;Campain&quot;, &quot;Perin&quot;, &quot;Ferencz&quot;, &quot;Saylors&quot;,&#13;&#10;&#9;&#9;&#9;&#9;&quot;Briddick&quot;, &quot;Waycott&quot;, &quot;Bowley&quot;, &quot;Malet&quot;, &quot;Malet&quot;, &quot;Bolognia&quot;, &quot;Nestle&quot;, &quot;Doe&quot; };&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public void initCustomersIfNotExisting(int number) {&#13;&#10;&#9;&#9;if (!customerDAO.findAll().isEmpty()) {&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#13;&#10;&#9;&#9;for (int i = 0; i &lt; number; i++) {&#13;&#10;&#9;&#9;&#9;customers.add(new Customer(i + 1000, getName(), getCompany(), getCountry(), getDate(),&#13;&#10;&#9;&#9;&#9;&#9;&#9;CustomerStatus.random(), getActivity()));&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;customers = customerDAO.saveAll(customers);&#13;&#10;&#9;&#9;&#9;Ivy.log().info(&quot;INIT COMPLETED: Records: &quot; + customers.size());&#13;&#10;&#9;&#9;} catch (TransactionRolledbackException e) {&#13;&#10;&#9;&#9;&#9;Ivy.log().error(e);&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;assignGroupsToCustomers(customomers);&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private void assignGroupsToCustomers(List&lt;Customer&gt; customers) {&#13;&#10;&#9;&#9;CustomerGroup groupA = new CustomerGroup(&quot;Enterprise Customers&quot;);&#13;&#10;&#9;&#9;groupA.setDescription(&quot;Large enterprise clients&quot;);&#13;&#10;&#9;&#9;groupA.setLeader(&quot;Alice Smith&quot;);&#13;&#10;&#13;&#10;&#9;&#9;CustomerGroup groupB = new CustomerGroup(&quot;SMB Customers&quot;);&#13;&#10;&#9;&#9;groupB.setDescription(&quot;Small and medium businesses&quot;);&#13;&#10;&#9;&#9;groupB.setLeader(&quot;Bob Johnson&quot;);&#13;&#10;&#13;&#10;&#9;&#9;CustomerGroup groupC = new CustomerGroup(&quot;VIP Customers&quot;);&#13;&#10;&#9;&#9;groupC.setDescription(&quot;High value VIP clients&quot;);&#13;&#10;&#9;&#9;groupC.setLeader(&quot;Carol White&quot;);&#13;&#10;&#13;&#10;&#9;&#9;// Example: Assign groups to customers during initialization&#13;&#10;&#9;&#9;for (int i = 0; i &lt; customers.size(); i++) {&#13;&#10;&#9;&#9;&#9;Customer customer = customers.get(i);&#13;&#10;&#9;&#9;&#9;if (i % 3 == 0) {&#13;&#10;&#9;&#9;&#9;&#9;customer.setGroup(groupA);&#13;&#10;&#9;&#9;&#9;&#9;groupA.getCustomers().add(customer);&#13;&#10;&#9;&#9;&#9;} else if (i % 3 == 1) {&#13;&#10;&#9;&#9;&#9;&#9;customer.setGroup(groupB);&#13;&#10;&#9;&#9;&#9;&#9;groupB.getCustomers().add(customer);&#13;&#10;&#9;&#9;&#9;} else {&#13;&#10;&#9;&#9;&#9;&#9;customer.setGroup(groupC);&#13;&#10;&#9;&#9;&#9;&#9;groupC.getCustomers().add(customer);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public List&lt;Country&gt; getCountries() {&#13;&#10;&#9;&#9;return Arrays.asList(countries);&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public CustomerStatus[] getCustomerStatus() {&#13;&#10;&#9;&#9;return CustomerStatus.values();&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public List&lt;CustomerGroup&gt; getAllGroups() {&#13;&#10;&#9;&#9;return GROUPS;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private String getName() {&#13;&#10;&#9;&#9;return firstNames[random.nextInt(firstNames.length)] + Constants.SPACE + (char) (random.nextInt(26) + 'A')&#13;&#10;&#9;&#9;&#9;&#9;+ Constants.SPACE + lastNames[random.nextInt(lastNames.length)];&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private Country getCountry() {&#13;&#10;&#9;&#9;return countries[random.nextInt(countries.length)];&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private String getCompany() {&#13;&#10;&#9;&#9;return companies[random.nextInt(companies.length)];&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private LocalDate getDate() {&#13;&#10;&#9;&#9;LocalDate now = LocalDate.now();&#13;&#10;&#9;&#9;long randomDay = ThreadLocalRandom.current().nextLong(now.minusDays(30).toEpochDay(), now.toEpochDay());&#13;&#10;&#9;&#9;return LocalDate.ofEpochDay(randomDay);&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private int getActivity() {&#13;&#10;&#9;&#9;return random.nextInt(100);&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public List&lt;Customer&gt; findAll() {&#13;&#10;&#9;&#9;return customerDAO.findAll();&#13;&#10;&#9;}&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table/src/com/axonivy/market/extendedtable/DataTableStateBean.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table/src/com/axonivy/market/extendedtable/DataTableStateBean.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import javax.faces.context.FacesContext;&#10;&#10;public class DataTableStateBean {&#10;    // ...existing code...&#10;&#10;    public void saveTableState() {&#10;        String explicitSave = FacesContext.getCurrentInstance()&#10;            .getExternalContext()&#10;            .getRequestParameterMap()&#10;            .get(&quot;explicitSave&quot;);&#10;        if (!&quot;true&quot;.equals(explicitSave)) {&#10;            // Ignore save if not called from the explicit save button&#10;            return;&#10;        }&#10;        // ...existing save logic...&#10;    }&#10;&#10;    // ...existing code...&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table/src/com/axonivy/market/extendedtable/beans/DataTableStateBean.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table/src/com/axonivy/market/extendedtable/beans/DataTableStateBean.java" />
              <option name="originalContent" value="package com.axonivy.market.extendedtable.beans;&#10;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.addErrorMsg;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.addInfoMsg;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.findComponent;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.findComponentFromClientId;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.getRequestParameterValue;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.getViewRoot;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;import javax.el.ValueExpression;&#10;import javax.faces.bean.ManagedBean;&#10;import javax.faces.bean.ViewScoped;&#10;import javax.faces.component.UIComponent;&#10;&#10;import org.primefaces.PrimeFaces;&#10;import org.primefaces.component.datatable.DataTable;&#10;import org.primefaces.component.datatable.DataTableState;&#10;import org.primefaces.model.FilterMeta;&#10;import org.primefaces.model.SortMeta;&#10;import org.primefaces.model.filter.FilterConstraint;&#10;&#10;import com.axonivy.market.extendedtable.repo.DataTableStateRepository;&#10;import com.axonivy.market.extendedtable.repo.SessionDataTableStateRepository;&#10;import com.axonivy.market.extendedtable.utils.Attrs;&#10;import com.fasterxml.jackson.annotation.JsonIgnore;&#10;import com.fasterxml.jackson.core.JsonProcessingException;&#10;import com.fasterxml.jackson.core.type.TypeReference;&#10;import com.fasterxml.jackson.databind.DeserializationFeature;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;&#10;&#10;import ch.ivyteam.ivy.environment.Ivy;&#10;&#10;@ViewScoped&#10;@ManagedBean(name = &quot;dataTableStateBean&quot;)&#10;public class DataTableStateBean {&#10;&#10;&#9;private static final String TABLE_ID = &quot;tableId&quot;;&#10;&#9;private static final String DATA_TABLE_STATE_REPOSITORY = &quot;dataTableStateRepository&quot;;&#10;&#9;private static final String GROWL_MSG_ID = &quot;extendedTableGrowlMsg&quot;;&#10;&#9;private static final String STATE_KEY_PREFIX = &quot;DATATABLE_&quot;;&#10;&#9;private static final String STATE_KEY_PATTERN = STATE_KEY_PREFIX + &quot;%s_%s&quot;;&#10;&#9;private String stateName;&#10;&#9;private List&lt;String&gt; stateNames = new ArrayList&lt;&gt;();&#10;&#10;&#9;public void saveTableState() {&#10;&#9;&#9;String saveButtonClick = getRequestParameterValue(&quot;saveButtonClick&quot;);&#10;&#9;&#9;if (!&quot;true&quot;.equals(saveButtonClick)) {&#10;&#9;&#9;&#9;// Ignore save if not called from the explicit save button&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;String tableClientId = getTableClientId();&#10;&#9;&#9;DataTable table = (DataTable) findComponentFromClientId(tableClientId);&#10;&#10;&#9;&#9;if (table != null) {&#10;&#9;&#9;&#9;DataTableState state = table.getMultiViewState(false);&#10;&#9;&#9;&#9;if (state != null) {&#10;&#9;&#9;&#9;&#9;persistDataTableState(state);&#10;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;Ivy.log().warn(&quot;State is null for the table: {0}&quot;, getTableClientId());&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;stateNames = fetchAllDataTableStateNames();&#10;&#9;&#9;addInfoMsg(GROWL_MSG_ID, &quot;Saved the table state successfully&quot;, null);&#10;&#9;}&#10;&#10;&#9;public void restoreTableState() {&#10;&#9;&#9;DataTable currentTable = (DataTable) findComponentFromClientId(getTableClientId());&#10;&#10;&#9;&#9;if (currentTable == null) {&#10;&#9;&#9;&#9;Ivy.log().warn(&quot;Table not found with the given id: {0}&quot;, getTableClientId());&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if (currentTable.getFilteredValue() == null) {&#10;&#9;&#9;&#9;currentTable.setFilteredValue(new ArrayList&lt;&gt;());&#10;&#9;&#9;}&#10;&#10;&#9;&#9;currentTable.reset();&#10;&#10;&#9;&#9;DataTableState persistedState = fetchDataTableState();&#10;&#10;&#9;&#9;if (persistedState != null) {&#10;&#9;&#9;&#9;DataTableState currentState = currentTable.getMultiViewState(true); // force create&#10;&#9;&#9;&#9;currentState.setFilterBy(persistedState.getFilterBy());&#10;&#9;&#9;&#9;currentState.setSortBy(persistedState.getSortBy());&#10;&#9;&#9;&#9;currentState.setFirst(persistedState.getFirst());&#10;&#9;&#9;&#9;currentState.setColumnMeta(persistedState.getColumnMeta());&#10;&#9;&#9;&#9;currentState.setExpandedRowKeys(persistedState.getExpandedRowKeys());&#10;&#9;&#9;&#9;currentState.setRows(persistedState.getRows());&#10;&#9;&#9;&#9;currentState.setSelectedRowKeys(persistedState.getSelectedRowKeys());&#10;&#9;&#9;&#9;currentState.setWidth(persistedState.getWidth());&#10;&#9;&#9;&#9;currentTable.setFirst(persistedState.getFirst());&#10;&#10;&#9;&#9;&#9;currentTable.filterAndSort();&#10;&#9;&#9;&#9;currentTable.resetColumns();&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;Ivy.log().warn(&quot;No saved table state to restore for the table %s and state %s&quot;, getTableClientId(),&#10;&#9;&#9;&#9;&#9;&#9;stateName);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public void resetTable() {&#10;&#9;&#9;String viewId = getViewRoot().getViewId();&#10;&#9;&#9;String tableClientId = getTableClientId();&#10;&#9;&#9;PrimeFaces.current().multiViewState().clearAll(viewId, true, null);&#10;&#9;&#9;stateName = null;&#10;&#9;&#9;DataTable currentTable = (DataTable) findComponentFromClientId(tableClientId);&#10;&#10;&#9;&#9;if (currentTable == null) {&#10;&#9;&#9;&#9;Ivy.log().warn(&quot;Table not found with the given id: {0}&quot;, tableClientId);&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;currentTable.clearInitialState();&#10;&#9;&#9;currentTable.resetColumns();&#10;&#9;&#9;addInfoMsg(GROWL_MSG_ID, &quot;Reset the table successfully&quot;, null);&#10;&#9;}&#10;&#10;&#9;public void deleteTableState() {&#10;&#9;&#9;String stateKey = getStateKey();&#10;&#9;&#9;if (!getStateRepository().delete(stateKey)) {&#10;&#9;&#9;&#9;addErrorMsg(stateKey, &quot;No existing name &quot; + stateKey, stateKey);&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;stateNames = fetchAllDataTableStateNames();&#10;&#9;&#9;&#9;if (stateNames.size() &gt; 0) {&#10;&#9;&#9;&#9;&#9;stateName = stateNames.get(0);&#10;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;stateName = null;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;addInfoMsg(GROWL_MSG_ID, &quot;Delete the state successfully&quot;, null);&#10;&#9;}&#10;&#10;&#9;public List&lt;String&gt; completeStateName(String query) {&#10;&#9;&#9;if (stateNames == null || stateNames.isEmpty()) {&#10;&#9;&#9;&#9;stateNames = fetchAllDataTableStateNames();&#10;&#9;&#9;&#9;Ivy.log().info(&quot;stateNames : &quot; + stateNames);&#10;&#9;&#9;}&#10;&#9;&#9;if (stateNames == null || stateNames.isEmpty()) {&#10;&#9;&#9;&#9;Ivy.log().info(&quot;stateNames are tempty: &quot;);&#10;&#9;&#9;&#9;return Collections.emptyList();&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if (query == null || query.trim().isEmpty()) {&#10;&#9;&#9;&#9;return stateNames;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return stateNames.stream().filter(name -&gt; name != null &amp;&amp; name.toLowerCase().contains(query.toLowerCase()))&#10;&#9;&#9;&#9;&#9;.toList();&#10;&#9;}&#10;&#10;&#9;private void persistDataTableState(DataTableState state) {&#10;&#9;&#9;String stateKey = getStateKey();&#10;&#10;&#9;&#9;ObjectMapper mapper = new ObjectMapper();&#10;&#9;&#9;mapper.registerModule(new JavaTimeModule()).addMixIn(FilterMeta.class, FilterDataTableMixin.class)&#10;&#9;&#9;&#9;&#9;.addMixIn(SortMeta.class, SortDataTableMixin.class);&#10;&#9;&#9;mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);&#10;&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;String stateJson = mapper.writeValueAsString(state);&#10;&#9;&#9;&#9;getStateRepository().save(stateKey, stateJson);&#10;&#9;&#9;} catch (JsonProcessingException e) {&#10;&#9;&#9;&#9;Ivy.log().error(&quot;Couldn't serialize TableState to JSON&quot;, e);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private DataTableState fetchDataTableState() {&#10;&#9;&#9;String stateKey = getStateKey();&#10;&#9;&#9;String stateJson = getStateRepository().load(stateKey);&#10;&#10;&#9;&#9;Ivy.log().info(stateKey);&#10;&#9;&#9;Ivy.log().info(stateJson);&#10;&#10;&#9;&#9;ObjectMapper mapper = new ObjectMapper();&#10;&#9;&#9;mapper.registerModule(new JavaTimeModule()).addMixIn(FilterMeta.class, FilterDataTableMixin.class)&#10;&#9;&#9;&#9;&#9;.addMixIn(SortMeta.class, SortDataTableMixin.class);&#10;&#9;&#9;mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);&#10;&#9;&#9;DataTableState tableState = null;&#10;&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;tableState = mapper.readValue(stateJson, new TypeReference&lt;DataTableState&gt;() {&#10;&#9;&#9;&#9;});&#10;&#9;&#9;} catch (IOException e) {&#10;&#9;&#9;&#9;Ivy.log().error(&quot;Couldn't deserialize TableState from JSON&quot;, e);&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return tableState;&#10;&#9;}&#10;&#10;&#9;private List&lt;String&gt; fetchAllDataTableStateNames() {&#10;&#9;&#9;String tableId = getTableClientId();&#10;&#9;&#9;String prefix = STATE_KEY_PREFIX + tableId + &quot;_&quot;;&#10;&#10;&#9;&#9;return getStateRepository().listKeys(prefix).stream().filter(name -&gt; name.startsWith(prefix))&#10;&#9;&#9;&#9;&#9;.map(name -&gt; name.substring(prefix.length())).filter(value -&gt; !value.isEmpty()).toList();&#10;&#9;}&#10;&#10;&#9;private String getStateKey() {&#10;&#9;&#9;return String.format(STATE_KEY_PATTERN, getTableClientId(), stateName);&#10;&#9;}&#10;&#10;&#9;private DataTableStateRepository getStateRepository() {&#10;&#9;&#9;DataTableStateRepository repo = (DataTableStateRepository) Attrs.currentContext()&#10;&#9;&#9;&#9;&#9;.get(DATA_TABLE_STATE_REPOSITORY);&#10;&#9;&#9;if (repo instanceof DataTableStateRepository) {&#10;&#9;&#9;&#9;return (DataTableStateRepository) repo;&#10;&#9;&#9;}&#10;&#9;&#9;// fallback to default&#10;&#9;&#9;return new SessionDataTableStateRepository();&#10;&#9;}&#10;&#10;&#9;private String getTableClientId() {&#10;&#9;&#9;UIComponent tableComponent = findComponent((String) Attrs.currentContext().get(TABLE_ID));&#10;&#10;&#9;&#9;if (tableComponent == null) {&#10;&#9;&#9;&#9;throw new IllegalStateException(&#10;&#9;&#9;&#9;&#9;&#9;&quot;Component with id '&quot; + Attrs.currentContext().get(TABLE_ID) + &quot;' not found in view.&quot;);&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return tableComponent.getClientId();&#10;&#9;}&#10;&#10;&#9;public String getStateName() {&#10;&#9;&#9;return stateName;&#10;&#9;}&#10;&#10;&#9;public void setStateName(String stateName) {&#10;&#9;&#9;this.stateName = stateName;&#10;&#9;}&#10;&#10;&#9;public List&lt;String&gt; getStateNames() {&#10;&#9;&#9;return stateNames;&#10;&#9;}&#10;&#10;&#9;public void setStateNames(List&lt;String&gt; stateNames) {&#10;&#9;&#9;this.stateNames = stateNames;&#10;&#9;}&#10;&#10;&#9;public abstract static class SortDataTableMixin {&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;public abstract javax.el.ValueExpression getSortBy();&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;public abstract javax.el.ValueExpression getSortFunction();&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;public abstract Boolean getIsActive();&#10;&#9;}&#10;&#10;&#9;public abstract class FilterDataTableMixin {&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;ValueExpression filterBy;&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;FilterConstraint constraint;&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;abstract boolean isActive();&#10;&#9;}&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.axonivy.market.extendedtable.beans;&#10;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.addErrorMsg;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.addInfoMsg;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.findComponent;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.findComponentFromClientId;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.getRequestParameterValue;&#10;import static com.axonivy.market.extendedtable.utils.JSFUtils.getViewRoot;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;import javax.el.ValueExpression;&#10;import javax.faces.bean.ManagedBean;&#10;import javax.faces.bean.ViewScoped;&#10;import javax.faces.component.UIComponent;&#10;&#10;import org.primefaces.PrimeFaces;&#10;import org.primefaces.component.datatable.DataTable;&#10;import org.primefaces.component.datatable.DataTableState;&#10;import org.primefaces.model.FilterMeta;&#10;import org.primefaces.model.SortMeta;&#10;import org.primefaces.model.filter.FilterConstraint;&#10;&#10;import com.axonivy.market.extendedtable.repo.DataTableStateRepository;&#10;import com.axonivy.market.extendedtable.repo.SessionDataTableStateRepository;&#10;import com.axonivy.market.extendedtable.utils.Attrs;&#10;import com.fasterxml.jackson.annotation.JsonIgnore;&#10;import com.fasterxml.jackson.core.JsonProcessingException;&#10;import com.fasterxml.jackson.core.type.TypeReference;&#10;import com.fasterxml.jackson.databind.DeserializationFeature;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;&#10;&#10;import ch.ivyteam.ivy.environment.Ivy;&#10;&#10;@ViewScoped&#10;@ManagedBean(name = &quot;dataTableStateBean&quot;)&#10;public class DataTableStateBean {&#10;&#10;&#9;private static final String TABLE_ID = &quot;tableId&quot;;&#10;&#9;private static final String DATA_TABLE_STATE_REPOSITORY = &quot;dataTableStateRepository&quot;;&#10;&#9;private static final String GROWL_MSG_ID = &quot;extendedTableGrowlMsg&quot;;&#10;&#9;private static final String STATE_KEY_PREFIX = &quot;DATATABLE_&quot;;&#10;&#9;private static final String STATE_KEY_PATTERN = STATE_KEY_PREFIX + &quot;%s_%s&quot;;&#10;&#9;private String stateName;&#10;&#9;private List&lt;String&gt; stateNames = new ArrayList&lt;&gt;();&#10;&#10;&#9;public void saveTableState() {&#10;&#9;&#9;String saveButtonClick = getRequestParameterValue(&quot;saveButtonClick&quot;);&#10;&#9;&#9;if (!Boolean.parseBoolean(saveButtonClick)) {&#10;&#9;&#9;&#9;// Ignore save if not called from the explicit save button&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;String tableClientId = getTableClientId();&#10;&#9;&#9;DataTable table = (DataTable) findComponentFromClientId(tableClientId);&#10;&#10;&#9;&#9;if (table != null) {&#10;&#9;&#9;&#9;DataTableState state = table.getMultiViewState(false);&#10;&#9;&#9;&#9;if (state != null) {&#10;&#9;&#9;&#9;&#9;persistDataTableState(state);&#10;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;Ivy.log().warn(&quot;State is null for the table: {0}&quot;, getTableClientId());&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;stateNames = fetchAllDataTableStateNames();&#10;&#9;&#9;addInfoMsg(GROWL_MSG_ID, &quot;Saved the table state successfully&quot;, null);&#10;&#9;}&#10;&#10;&#9;public void restoreTableState() {&#10;&#9;&#9;DataTable currentTable = (DataTable) findComponentFromClientId(getTableClientId());&#10;&#10;&#9;&#9;if (currentTable == null) {&#10;&#9;&#9;&#9;Ivy.log().warn(&quot;Table not found with the given id: {0}&quot;, getTableClientId());&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if (currentTable.getFilteredValue() == null) {&#10;&#9;&#9;&#9;currentTable.setFilteredValue(new ArrayList&lt;&gt;());&#10;&#9;&#9;}&#10;&#10;&#9;&#9;currentTable.reset();&#10;&#10;&#9;&#9;DataTableState persistedState = fetchDataTableState();&#10;&#10;&#9;&#9;if (persistedState != null) {&#10;&#9;&#9;&#9;DataTableState currentState = currentTable.getMultiViewState(true); // force create&#10;&#9;&#9;&#9;currentState.setFilterBy(persistedState.getFilterBy());&#10;&#9;&#9;&#9;currentState.setSortBy(persistedState.getSortBy());&#10;&#9;&#9;&#9;currentState.setFirst(persistedState.getFirst());&#10;&#9;&#9;&#9;currentState.setColumnMeta(persistedState.getColumnMeta());&#10;&#9;&#9;&#9;currentState.setExpandedRowKeys(persistedState.getExpandedRowKeys());&#10;&#9;&#9;&#9;currentState.setRows(persistedState.getRows());&#10;&#9;&#9;&#9;currentState.setSelectedRowKeys(persistedState.getSelectedRowKeys());&#10;&#9;&#9;&#9;currentState.setWidth(persistedState.getWidth());&#10;&#9;&#9;&#9;currentTable.setFirst(persistedState.getFirst());&#10;&#10;&#9;&#9;&#9;currentTable.filterAndSort();&#10;&#9;&#9;&#9;currentTable.resetColumns();&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;Ivy.log().warn(&quot;No saved table state to restore for the table %s and state %s&quot;, getTableClientId(),&#10;&#9;&#9;&#9;&#9;&#9;stateName);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public void resetTable() {&#10;&#9;&#9;String viewId = getViewRoot().getViewId();&#10;&#9;&#9;String tableClientId = getTableClientId();&#10;&#9;&#9;PrimeFaces.current().multiViewState().clearAll(viewId, true, null);&#10;&#9;&#9;stateName = null;&#10;&#9;&#9;DataTable currentTable = (DataTable) findComponentFromClientId(tableClientId);&#10;&#10;&#9;&#9;if (currentTable == null) {&#10;&#9;&#9;&#9;Ivy.log().warn(&quot;Table not found with the given id: {0}&quot;, tableClientId);&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;currentTable.clearInitialState();&#10;&#9;&#9;currentTable.resetColumns();&#10;&#9;&#9;addInfoMsg(GROWL_MSG_ID, &quot;Reset the table successfully&quot;, null);&#10;&#9;}&#10;&#10;&#9;public void deleteTableState() {&#10;&#9;&#9;String stateKey = getStateKey();&#10;&#9;&#9;if (!getStateRepository().delete(stateKey)) {&#10;&#9;&#9;&#9;addErrorMsg(stateKey, &quot;No existing name &quot; + stateKey, stateKey);&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;stateNames = fetchAllDataTableStateNames();&#10;&#9;&#9;&#9;if (stateNames.size() &gt; 0) {&#10;&#9;&#9;&#9;&#9;stateName = stateNames.get(0);&#10;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;stateName = null;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;addInfoMsg(GROWL_MSG_ID, &quot;Delete the state successfully&quot;, null);&#10;&#9;}&#10;&#10;&#9;public List&lt;String&gt; completeStateName(String query) {&#10;&#9;&#9;if (stateNames == null || stateNames.isEmpty()) {&#10;&#9;&#9;&#9;stateNames = fetchAllDataTableStateNames();&#10;&#9;&#9;&#9;Ivy.log().info(&quot;stateNames : &quot; + stateNames);&#10;&#9;&#9;}&#10;&#9;&#9;if (stateNames == null || stateNames.isEmpty()) {&#10;&#9;&#9;&#9;Ivy.log().info(&quot;stateNames are tempty: &quot;);&#10;&#9;&#9;&#9;return Collections.emptyList();&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if (query == null || query.trim().isEmpty()) {&#10;&#9;&#9;&#9;return stateNames;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return stateNames.stream().filter(name -&gt; name != null &amp;&amp; name.toLowerCase().contains(query.toLowerCase()))&#10;&#9;&#9;&#9;&#9;.toList();&#10;&#9;}&#10;&#10;&#9;private void persistDataTableState(DataTableState state) {&#10;&#9;&#9;String stateKey = getStateKey();&#10;&#10;&#9;&#9;ObjectMapper mapper = new ObjectMapper();&#10;&#9;&#9;mapper.registerModule(new JavaTimeModule()).addMixIn(FilterMeta.class, FilterDataTableMixin.class)&#10;&#9;&#9;&#9;&#9;.addMixIn(SortMeta.class, SortDataTableMixin.class);&#10;&#9;&#9;mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);&#10;&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;String stateJson = mapper.writeValueAsString(state);&#10;&#9;&#9;&#9;getStateRepository().save(stateKey, stateJson);&#10;&#9;&#9;} catch (JsonProcessingException e) {&#10;&#9;&#9;&#9;Ivy.log().error(&quot;Couldn't serialize TableState to JSON&quot;, e);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;private DataTableState fetchDataTableState() {&#10;&#9;&#9;String stateKey = getStateKey();&#10;&#9;&#9;String stateJson = getStateRepository().load(stateKey);&#10;&#10;&#9;&#9;Ivy.log().info(stateKey);&#10;&#9;&#9;Ivy.log().info(stateJson);&#10;&#10;&#9;&#9;ObjectMapper mapper = new ObjectMapper();&#10;&#9;&#9;mapper.registerModule(new JavaTimeModule()).addMixIn(FilterMeta.class, FilterDataTableMixin.class)&#10;&#9;&#9;&#9;&#9;.addMixIn(SortMeta.class, SortDataTableMixin.class);&#10;&#9;&#9;mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);&#10;&#9;&#9;DataTableState tableState = null;&#10;&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;tableState = mapper.readValue(stateJson, new TypeReference&lt;DataTableState&gt;() {&#10;&#9;&#9;&#9;});&#10;&#9;&#9;} catch (IOException e) {&#10;&#9;&#9;&#9;Ivy.log().error(&quot;Couldn't deserialize TableState from JSON&quot;, e);&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return tableState;&#10;&#9;}&#10;&#10;&#9;private List&lt;String&gt; fetchAllDataTableStateNames() {&#10;&#9;&#9;String tableId = getTableClientId();&#10;&#9;&#9;String prefix = STATE_KEY_PREFIX + tableId + &quot;_&quot;;&#10;&#10;&#9;&#9;return getStateRepository().listKeys(prefix).stream().filter(name -&gt; name.startsWith(prefix))&#10;&#9;&#9;&#9;&#9;.map(name -&gt; name.substring(prefix.length())).filter(value -&gt; !value.isEmpty()).toList();&#10;&#9;}&#10;&#10;&#9;private String getStateKey() {&#10;&#9;&#9;return String.format(STATE_KEY_PATTERN, getTableClientId(), stateName);&#10;&#9;}&#10;&#10;&#9;private DataTableStateRepository getStateRepository() {&#10;&#9;&#9;DataTableStateRepository repo = (DataTableStateRepository) Attrs.currentContext()&#10;&#9;&#9;&#9;&#9;.get(DATA_TABLE_STATE_REPOSITORY);&#10;&#9;&#9;if (repo instanceof DataTableStateRepository) {&#10;&#9;&#9;&#9;return (DataTableStateRepository) repo;&#10;&#9;&#9;}&#10;&#9;&#9;// fallback to default&#10;&#9;&#9;return new SessionDataTableStateRepository();&#10;&#9;}&#10;&#10;&#9;private String getTableClientId() {&#10;&#9;&#9;UIComponent tableComponent = findComponent((String) Attrs.currentContext().get(TABLE_ID));&#10;&#10;&#9;&#9;if (tableComponent == null) {&#10;&#9;&#9;&#9;throw new IllegalStateException(&#10;&#9;&#9;&#9;&#9;&#9;&quot;Component with id '&quot; + Attrs.currentContext().get(TABLE_ID) + &quot;' not found in view.&quot;);&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return tableComponent.getClientId();&#10;&#9;}&#10;&#10;&#9;public String getStateName() {&#10;&#9;&#9;return stateName;&#10;&#9;}&#10;&#10;&#9;public void setStateName(String stateName) {&#10;&#9;&#9;this.stateName = stateName;&#10;&#9;}&#10;&#10;&#9;public List&lt;String&gt; getStateNames() {&#10;&#9;&#9;return stateNames;&#10;&#9;}&#10;&#10;&#9;public void setStateNames(List&lt;String&gt; stateNames) {&#10;&#9;&#9;this.stateNames = stateNames;&#10;&#9;}&#10;&#10;&#9;public abstract static class SortDataTableMixin {&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;public abstract javax.el.ValueExpression getSortBy();&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;public abstract javax.el.ValueExpression getSortFunction();&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;public abstract Boolean getIsActive();&#10;&#9;}&#10;&#10;&#9;public abstract class FilterDataTableMixin {&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;ValueExpression filterBy;&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;FilterConstraint constraint;&#10;&#10;&#9;&#9;@JsonIgnore&#10;&#9;&#9;abstract boolean isActive();&#10;&#9;}&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table/src/com/axonivy/market/extendedtable/utils/JSFUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table/src/com/axonivy/market/extendedtable/utils/JSFUtils.java" />
              <option name="originalContent" value="package com.axonivy.market.extendedtable.utils;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;import javax.faces.application.FacesMessage;&#10;import javax.faces.component.UIComponent;&#10;import javax.faces.component.UIInput;&#10;import javax.faces.component.UIViewRoot;&#10;import javax.faces.context.FacesContext;&#10;&#10;import org.primefaces.PrimeFaces;&#10;import org.primefaces.component.fieldset.Fieldset;&#10;import org.primefaces.component.outputlabel.OutputLabel;&#10;import org.primefaces.model.FilterMeta;&#10;import org.primefaces.util.ComponentTraversalUtils;&#10;&#10;import ch.ivyteam.ivy.environment.Ivy;&#10;&#10;public final class JSFUtils {&#10;&#9;public static final String JSF_SOURCE_PARAM = &quot;javax.faces.source&quot;;&#10;&#9;private static final int TREE_DEPTH_SEACH_LEVEL = 10;&#10;&#10;&#9;private JSFUtils() {&#10;&#9;}&#10;&#10;&#9;&#10;&#9;public static void addErrorMsg(String clientId, String summaryMsg, String detailMsg) {&#10;&#9;&#9;currentContext().addMessage(clientId, new FacesMessage(FacesMessage.SEVERITY_ERROR, summaryMsg, detailMsg));&#10;&#9;}&#10;&#9;&#10;&#9;private static FacesContext currentContext() {&#10;&#9;&#9;return FacesContext.getCurrentInstance();&#10;&#9;}&#10;&#9;&#10;&#9;public static UIViewRoot getViewRoot() {&#10;&#9;&#9;return currentContext().getViewRoot();&#10;&#9;}&#10;&#10;&#9;public static Object findSubmittingValue(String clientId) {&#10;&#9;&#9;UIInput component = (UIInput) currentContext().getViewRoot().findComponent(clientId);&#10;&#10;&#9;&#9;return component.getSubmittedValue();&#10;&#9;}&#10;&#10;&#9;public static void showDialog(String dialogName) {&#10;&#9;&#9;PrimeFaces.current().executeScript(&quot;PF('&quot; + dialogName + &quot;').show();&quot;);&#10;&#9;}&#10;&#10;&#9;public static void hideDialog(String dialogName) {&#10;&#9;&#9;PrimeFaces.current().executeScript(&quot;PF('&quot; + dialogName + &quot;').hide();&quot;);&#10;&#9;}&#10;&#9;&#10;&#9;public static UIComponent findComponentFromClientId(String clientId) {&#10;&#9;&#9;return getViewRoot().findComponent(clientId);&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * Update a list of expressions or clientIds.&#10;&#9; * &#10;&#9; * @param expressions&#10;&#9; */&#10;&#9;public static void updateComponents(String... expressions) {&#10;&#9;&#9;PrimeFaces.current().ajax().update(expressions);&#10;&#9;}&#10;&#10;&#9;public static String getCurrentComponentId() {&#10;&#9;&#9;return UIComponent.getCurrentComponent(FacesContext.getCurrentInstance()).getId();&#10;&#9;}&#10;&#10;&#9;public static Fieldset findClosestParentFieldset() {&#10;&#9;&#9;UIComponent currentComponent = UIComponent.getCurrentComponent(FacesContext.getCurrentInstance());&#10;&#9;&#9;if (currentComponent instanceof Fieldset) {&#10;&#9;&#9;&#9;return null;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;int counter = 0;&#10;&#10;&#9;&#9;while (currentComponent != null &amp;&amp; counter++ &lt; TREE_DEPTH_SEACH_LEVEL&#10;&#9;&#9;&#9;&#9;&amp;&amp; !(currentComponent instanceof Fieldset)) {&#10;&#9;&#9;&#9;currentComponent = currentComponent.getParent();&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return currentComponent instanceof Fieldset ? (Fieldset) currentComponent : null;&#10;&#9;}&#10;&#10;&#9;public static boolean isButtonClicked(FacesContext context, String buttonId) {&#10;&#9;&#9;String[] sourceIds = context.getExternalContext().getRequestParameterValuesMap().get(JSF_SOURCE_PARAM);&#10;&#9;&#9;if (sourceIds == null || sourceIds.length == 0) {&#10;&#9;&#9;&#9;return false;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return sourceIds[0].contentEquals(buttonId);&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * @param localId: short id, not clientId (full path)&#10;&#9; * @return&#10;&#9; */&#10;&#9;public static UIComponent findComponent(String localId) {&#10;&#9;&#9;FacesContext context = FacesContext.getCurrentInstance();&#10;&#9;&#9;UIComponent root = context.getViewRoot();&#10;&#10;&#9;&#9;return ComponentTraversalUtils.firstWithId(localId, root);&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * @param localId: short id (e.g buttonSave), not client id (full id: e.g&#10;&#9; *                 requestForm:buttonSave)&#10;&#9; */&#10;&#9;public static void updateComponent(String localId) {&#10;&#9;&#9;UIComponent component = findComponent(localId);&#10;&#10;&#9;&#9;if (component != null) {&#10;&#9;&#9;&#9;FacesContext context = FacesContext.getCurrentInstance();&#10;&#9;&#9;&#9;String clientId = component.getClientId(context);&#10;&#9;&#9;&#9;context.getPartialViewContext().getRenderIds().add(clientId);&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;Ivy.log().warn(&quot;Component with ID &quot; + localId + &quot; not found.&quot;);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public static void updateComponentWithClientId(String clientId) {&#10;&#9;&#9;PrimeFaces.current().ajax().update(clientId);&#10;&#9;}&#10;&#10;&#9;public static void updateComponentWithWidgetVar(String widgetVar) {&#10;&#9;&#9;PrimeFaces.current().executeScript(&quot;PF('&quot; + widgetVar + &quot;').update()&quot;);&#10;&#9;}&#10;&#10;&#9;public static void highLightErrorComponent(String id) {&#10;&#9;&#9;final UIComponent c = findComponent(id);&#10;&#9;&#9;highLightErrorComponent(c);&#10;&#9;}&#10;&#10;&#9;public static void highLightErrorComponent(UIComponent c) {&#10;&#9;&#9;final String scriptPattern = &quot;document.getElementById('%s').classList.add('%s');&quot;;&#10;&#9;&#9;PrimeFaces.current().executeScript(String.format(scriptPattern, c.getClientId(), &quot;error-component&quot;));&#10;&#9;}&#10;&#10;&#9;public static UIComponent findOutputLabel(UIComponent root, String forValue) {&#10;&#9;&#9;if (root == null || forValue == null) {&#10;&#9;&#9;&#9;return null;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if (root instanceof OutputLabel &amp;&amp; forValue.equals(root.getAttributes().get(&quot;for&quot;))) {&#10;&#9;&#9;&#9;return root;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Recursively search through the children&#10;&#9;&#9;for (UIComponent child : root.getChildren()) {&#10;&#9;&#9;&#9;UIComponent found = findOutputLabel(child, forValue);&#10;&#9;&#9;&#9;if (found != null) {&#10;&#9;&#9;&#9;&#9;return found;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return null; // Not found&#10;&#9;}&#10;&#10;&#9;public static Map&lt;String, Object&gt; buildDatatableFilterMap(Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;Map&lt;String, Object&gt; filters = new HashMap&lt;&gt;();&#10;&#9;&#9;if (filterBy != null) {&#10;&#9;&#9;&#9;for (Map.Entry&lt;String, FilterMeta&gt; entry : filterBy.entrySet()) {&#10;&#9;&#9;&#9;&#9;filters.put(entry.getKey(), entry.getValue().getFilterValue());&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;return filters;&#10;&#9;}&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.axonivy.market.extendedtable.utils;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;import javax.faces.application.FacesMessage;&#10;import javax.faces.component.UIComponent;&#10;import javax.faces.component.UIViewRoot;&#10;import javax.faces.context.FacesContext;&#10;&#10;import org.primefaces.PrimeFaces;&#10;import org.primefaces.component.fieldset.Fieldset;&#10;import org.primefaces.component.outputlabel.OutputLabel;&#10;import org.primefaces.model.FilterMeta;&#10;import org.primefaces.util.ComponentTraversalUtils;&#10;&#10;import ch.ivyteam.ivy.environment.Ivy;&#10;&#10;public final class JSFUtils {&#10;&#9;public static final String JSF_SOURCE_PARAM = &quot;javax.faces.source&quot;;&#10;&#9;private static final int TREE_DEPTH_SEACH_LEVEL = 10;&#10;&#10;&#9;private JSFUtils() {&#10;&#9;}&#10;&#10;&#9;public static void addErrorMsg(String clientId, String summaryMsg, String detailMsg) {&#10;&#9;&#9;currentContext().addMessage(clientId, new FacesMessage(FacesMessage.SEVERITY_ERROR, summaryMsg, detailMsg));&#10;&#9;}&#10;&#10;&#9;private static FacesContext currentContext() {&#10;&#9;&#9;return FacesContext.getCurrentInstance();&#10;&#9;}&#10;&#10;&#9;public static UIViewRoot getViewRoot() {&#10;&#9;&#9;return currentContext().getViewRoot();&#10;&#9;}&#10;&#10;&#9;public static void showDialog(String dialogName) {&#10;&#9;&#9;PrimeFaces.current().executeScript(&quot;PF('&quot; + dialogName + &quot;').show();&quot;);&#10;&#9;}&#10;&#10;&#9;public static void hideDialog(String dialogName) {&#10;&#9;&#9;PrimeFaces.current().executeScript(&quot;PF('&quot; + dialogName + &quot;').hide();&quot;);&#10;&#9;}&#10;&#10;&#9;public static UIComponent findComponentFromClientId(String clientId) {&#10;&#9;&#9;return getViewRoot().findComponent(clientId);&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * Update a list of expressions or clientIds.&#10;&#9; * &#10;&#9; * @param expressions&#10;&#9; */&#10;&#9;public static void updateComponents(String... expressions) {&#10;&#9;&#9;PrimeFaces.current().ajax().update(expressions);&#10;&#9;}&#10;&#10;&#9;public static Fieldset findClosestParentFieldset() {&#10;&#9;&#9;UIComponent currentComponent = UIComponent.getCurrentComponent(FacesContext.getCurrentInstance());&#10;&#9;&#9;if (currentComponent instanceof Fieldset) {&#10;&#9;&#9;&#9;return null;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;int counter = 0;&#10;&#10;&#9;&#9;while (currentComponent != null &amp;&amp; counter++ &lt; TREE_DEPTH_SEACH_LEVEL&#10;&#9;&#9;&#9;&#9;&amp;&amp; !(currentComponent instanceof Fieldset)) {&#10;&#9;&#9;&#9;currentComponent = currentComponent.getParent();&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return currentComponent instanceof Fieldset ? (Fieldset) currentComponent : null;&#10;&#9;}&#10;&#10;&#9;public static boolean isButtonClicked(FacesContext context, String buttonId) {&#10;&#9;&#9;String[] sourceIds = context.getExternalContext().getRequestParameterValuesMap().get(JSF_SOURCE_PARAM);&#10;&#9;&#9;if (sourceIds == null || sourceIds.length == 0) {&#10;&#9;&#9;&#9;return false;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return sourceIds[0].contentEquals(buttonId);&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * @param localId: short id, not clientId (full path)&#10;&#9; * @return&#10;&#9; */&#10;&#9;public static UIComponent findComponent(String localId) {&#10;&#9;&#9;FacesContext context = FacesContext.getCurrentInstance();&#10;&#9;&#9;UIComponent root = context.getViewRoot();&#10;&#10;&#9;&#9;return ComponentTraversalUtils.firstWithId(localId, root);&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * @param localId: short id (e.g buttonSave), not client id (full id: e.g&#10;&#9; *                 requestForm:buttonSave)&#10;&#9; */&#10;&#9;public static void updateComponent(String localId) {&#10;&#9;&#9;UIComponent component = findComponent(localId);&#10;&#10;&#9;&#9;if (component != null) {&#10;&#9;&#9;&#9;FacesContext context = FacesContext.getCurrentInstance();&#10;&#9;&#9;&#9;String clientId = component.getClientId(context);&#10;&#9;&#9;&#9;context.getPartialViewContext().getRenderIds().add(clientId);&#10;&#9;&#9;} else {&#10;&#9;&#9;&#9;Ivy.log().warn(&quot;Component with ID &quot; + localId + &quot; not found.&quot;);&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;public static void highLightErrorComponent(String id) {&#10;&#9;&#9;final UIComponent c = findComponent(id);&#10;&#9;&#9;highLightErrorComponent(c);&#10;&#9;}&#10;&#10;&#9;public static void highLightErrorComponent(UIComponent c) {&#10;&#9;&#9;final String scriptPattern = &quot;document.getElementById('%s').classList.add('%s');&quot;;&#10;&#9;&#9;PrimeFaces.current().executeScript(String.format(scriptPattern, c.getClientId(), &quot;error-component&quot;));&#10;&#9;}&#10;&#10;&#9;public static UIComponent findOutputLabel(UIComponent root, String forValue) {&#10;&#9;&#9;if (root == null || forValue == null) {&#10;&#9;&#9;&#9;return null;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;if (root instanceof OutputLabel &amp;&amp; forValue.equals(root.getAttributes().get(&quot;for&quot;))) {&#10;&#9;&#9;&#9;return root;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Recursively search through the children&#10;&#9;&#9;for (UIComponent child : root.getChildren()) {&#10;&#9;&#9;&#9;UIComponent found = findOutputLabel(child, forValue);&#10;&#9;&#9;&#9;if (found != null) {&#10;&#9;&#9;&#9;&#9;return found;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;return null; // Not found&#10;&#9;}&#10;&#10;&#9;public static Map&lt;String, Object&gt; buildDatatableFilterMap(Map&lt;String, FilterMeta&gt; filterBy) {&#10;&#9;&#9;Map&lt;String, Object&gt; filters = new HashMap&lt;&gt;();&#10;&#9;&#9;if (filterBy != null) {&#10;&#9;&#9;&#9;for (Map.Entry&lt;String, FilterMeta&gt; entry : filterBy.entrySet()) {&#10;&#9;&#9;&#9;&#9;filters.put(entry.getKey(), entry.getValue().getFilterValue());&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;return filters;&#10;&#9;}&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table/src/test/java/com/axonivy/market/extendedtable/beans/DataTableStateBeanTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table/src/test/java/com/axonivy/market/extendedtable/beans/DataTableStateBeanTest.java" />
              <option name="updatedContent" value="package com.axonivy.market.extendedtable.beans;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;import java.util.*;&#10;&#10;class DataTableStateBeanTest {&#10;&#10;    private DataTableStateBean bean;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        bean = new DataTableStateBean();&#10;        // ...setup mock DataTable and session property map if needed...&#10;    }&#10;&#10;    @Test&#10;    void testSaveTableState() {&#10;        // ...existing code...&#10;        bean.saveTableState();&#10;        // Assert that the state is saved in the session property map&#10;        assertNotNull(bean.getTableStateFromIvyUser());&#10;    }&#10;&#10;    @Test&#10;    void testRestoreTableState() {&#10;        // ...existing code...&#10;        bean.saveTableState();&#10;        bean.restoreTableState();&#10;        // Assert that the restored state matches the saved state&#10;        assertEquals(bean.getTableStateFromIvyUser(), bean.getCurrentTableState());&#10;    }&#10;&#10;    @Test&#10;    void testDeleteTableState() {&#10;        // ...existing code...&#10;        bean.saveTableState();&#10;        bean.deleteTableState();&#10;        // Assert that the state is removed from the session property map&#10;        assertNull(bean.getTableStateFromIvyUser());&#10;    }&#10;&#10;    @Test&#10;    void testResetTableState() {&#10;        // ...existing code...&#10;        bean.saveTableState();&#10;        bean.resetTableState();&#10;        // Assert that the table state is reset to default&#10;        assertTrue(bean.isTableStateDefault());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extended-table/src_hd/com/axonivy/market/extendedtable/ExtendedTable/ExtendedTable.xhtml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extended-table/src_hd/com/axonivy/market/extendedtable/ExtendedTable/ExtendedTable.xhtml" />
              <option name="originalContent" value="&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&#10;&#9;xmlns:f=&quot;http://xmlns.jcp.org/jsf/core&quot;&#10;&#9;xmlns:h=&quot;http://xmlns.jcp.org/jsf/html&quot;&#10;&#9;xmlns:ui=&quot;http://xmlns.jcp.org/jsf/facelets&quot;&#10;&#9;xmlns:cc=&quot;http://xmlns.jcp.org/jsf/composite&quot;&#10;&#9;xmlns:ic=&quot;http://ivyteam.ch/jsf/component&quot;&#10;&#9;xmlns:p=&quot;http://primefaces.org/ui&quot;&#10;&#9;xmlns:c=&quot;http://java.sun.com/jsp/jstl/core&quot;&#10;&#9;xmlns:pe=&quot;http://primefaces.org/ui/extensions&quot;&gt;&#10;&lt;cc:interface componentType=&quot;IvyComponent&quot;&gt;&#10;&#9;&lt;!-- &#10;&#9;PROBLEMS: &#10;&#9;1. var=&quot;item&quot; is fixed =&gt; rowKey=&quot;#{item.id}&quot; is not flexible in naming&#10;&#9;2. Must switch for row selection/none selection&#10;&#9; --&gt;&#10;&#10;&#9;&lt;!-- Manage State Bean --&gt;&#10;&#9;&lt;cc:attribute name=&quot;manageStateBean&quot; required=&quot;true&quot;&#10;&#9;&#9;type=&quot;com.axonivy.market.extendedtable.DataTableStateBean&quot; /&gt;&#10;&#10;&#9;&lt;!-- State Repository --&gt;&#10;&#9;&lt;cc:attribute name=&quot;dataTableStateRepository&quot; required=&quot;false&quot;&#10;&#9;&#9;type=&quot;com.axonivy.market.extendedtable.repo.DataTableStateRepository&quot;&#10;&#9;&#9;shortDescription=&quot;Repo to persist/fetch the table state, default will be the SessionDataTableStateRepository.&quot; /&gt;&#10;&#10;&#9;&lt;!-- UI Labels --&gt;&#10;&#9;&lt;cc:attribute name=&quot;stateNameLabel&quot; default=&quot;State Name&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;resetTableLabel&quot; default=&quot;Reset Table&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;saveStateLabel&quot; default=&quot;Save Table State&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;restoreStateLabel&quot; default=&quot;Restore Table State&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;deleteStateLabel&quot; default=&quot;Delete Table State&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;stateNameRequiredMsg&quot;&#10;&#9;&#9;default=&quot;State name is required&quot;&gt;&lt;/cc:attribute&gt;&#10;&#10;&#9;&lt;cc:attribute name=&quot;showResetButton&quot; default=&quot;false&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;showDeleteButton&quot; default=&quot;false&quot;&gt;&lt;/cc:attribute&gt;&#10;&#10;&#9;&lt;!-- Datatable mapping --&gt;&#10;&#9;&lt;cc:attribute name=&quot;tableId&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;widgetVar&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;value&quot; required=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;paginator&quot; default=&quot;false&quot;&#10;&#9;&#9;shortDescription=&quot;Enables pagination. Default is false.&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rows&quot; default=&quot;0&quot;&#10;&#9;&#9;shortDescription=&quot;Number of rows to display per page. Default value is 0 meaning to display all data available.&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;sortMode&quot; default=&quot;single&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;emptyMessage&quot; default=&quot;No records found.&quot; /&gt;&#10;&#10;&#9;&lt;cc:attribute name=&quot;allowUnsorting&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;ariaRowLabel&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;binding&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;cellEditMode&quot; default=&quot;eager&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;cellSeparator&quot; /&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;clientCache&quot; default=&quot;false&quot; /&gt; --&gt;&#10;&#9;&lt;cc:attribute name=&quot;currentPageReportTemplate&quot;&#10;&#9;&#9;default=&quot;{startRecord}-{endRecord} of {totalRecords} records&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;dataLocale&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;dir&quot; default=&quot;ltr&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;disableContextMenuIfEmpty&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;disabledSelection&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;disabledTextSelection&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;draggableColumns&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;draggableRows&quot; default=&quot;false&quot; /&gt; --&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;draggableRowsFunction&quot; /&gt; --&gt;&#10;&#9;&lt;cc:attribute name=&quot;editInitEvent&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;editMode&quot; default=&quot;row&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;editable&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;editingRow&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;escapeText&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;expandedRow&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;filterBy&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;filterDelay&quot; default=&quot;300&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;filterEvent&quot; default=&quot;keyup&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;filteredValue&quot; required=&quot;false&quot;&#10;&#9;&#9;type=&quot;java.util.List&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;first&quot; default=&quot;0&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;frozenColumns&quot; default=&quot;0&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;frozenRows&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;globalFilter&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;globalFilterOnly&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;globalFilterFunction&quot; /&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;id&quot; /&gt; Replaced by tableId attr--&gt;&#10;&#9;&lt;cc:attribute name=&quot;lazy&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;liveResize&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;liveScroll&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;liveScrollBuffer&quot; default=&quot;0&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;multiViewState&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;nativeElements&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;onExpandStart&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;onRowClick&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;pageLinks&quot; default=&quot;10&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;paginatorAlwaysVisible&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;paginatorPosition&quot; default=&quot;both&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;paginatorTemplate&quot;&#10;&#9;&#9;default=&quot;{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;reflow&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rendered&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;renderEmptyFacets&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;resizableColumns&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;resizeMode&quot; default=&quot;fit&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowDragSelector&quot; default=&quot;td,span:not(.ui-c)&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowEditMode&quot; default=&quot;eager&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowExpandMode&quot; default=&quot;multiple&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowHover&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowIndexVar&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowKey&quot; required=&quot;false&quot; default=&quot;#{item.id}&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowSelectMode&quot; default=&quot;new&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowSelector&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowStatePreserved&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowStyleClass&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowsPerPageLabel&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowsPerPageTemplate&quot; default=&quot;5,10,{ShowAll|'All'}&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;saveOnCellBlur&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;scrollHeight&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;scrollRows&quot; default=&quot;0&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;scrollWidth&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;scrollable&quot; default=&quot;false&quot; /&gt;&#10;&#10;&#9;&lt;cc:attribute name=&quot;selectionMode&quot; type=&quot;java.lang.String&quot; default=&quot;&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;selection&quot; type=&quot;java.lang.Object&quot; required=&quot;false&quot; /&gt;&#10;&#10;&#9;&lt;cc:attribute name=&quot;selectionPageOnly&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;showGridlines&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;size&quot; default=&quot;regular&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;sortBy&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;skipChildren&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;stickyHeader&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;stickyTopAt&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;stripedRows&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;style&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;styleClass&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;summary&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;tabindex&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;tableStyle&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;tableStyleClass&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;value&quot; required=&quot;true&quot; /&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;var&quot; default=&quot;item&quot; type=&quot;&quot;/&gt; --&gt;&#10;&#9;&lt;cc:attribute name=&quot;virtualScroll&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;touchable&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;partialUpdate&quot; default=&quot;true&quot; /&gt;&#10;&lt;/cc:interface&gt;&#10;&#10;&lt;cc:implementation&gt;&#10;&#9;&lt;style&gt;&#10;.top-buttons {&#10;&#9;margin-left: 8px;&#10;}&#10;&lt;/style&gt;&#10;&#10;&#9;&lt;p:growl id=&quot;extendedTableGrowlMsg&quot;&gt;&lt;/p:growl&gt;&#10;&#10;&#9;&lt;p:outputPanel style=&quot;margin-bottom: 10px; text-align:right;&quot;&#10;&#9;&#9;id=&quot;tableStatePanel&quot;&gt;&#10;&#9;&#9;&lt;p:outputLabel for=&quot;stateNameInput&quot; value=&quot;#{cc.attrs.stateNameLabel}&quot; /&gt;&#10;&#9;&#9;&lt;p:autoComplete id=&quot;stateNameInput&quot; required=&quot;false&quot;&#10;&#9;&#9;&#9;value=&quot;#{cc.attrs.manageStateBean.stateName}&quot;&#10;&#9;&#9;&#9;completeMethod=&quot;#{cc.attrs.manageStateBean.completeStateName}&quot;&#10;&#9;&#9;&#9;dropdown=&quot;true&quot; forceSelection=&quot;false&quot; multiple=&quot;false&quot;&#10;&#9;&#9;&#9;placeholder=&quot;Enter or select state name&quot; var=&quot;name&quot;&#10;&#9;&#9;&#9;itemLabel=&quot;#{name}&quot; itemValue=&quot;#{name}&quot; minQueryLength=&quot;3&quot;&#10;&#9;&#9;&#9;requiredMessage=&quot;#{cc.attrs.stateNameRequiredMsg}&quot;&#10;&#9;&#9;&#9;style=&quot;width:250px; margin: 0px 30px&quot; /&gt;&#10;&#10;&#9;&#9;&lt;h:inputHidden id=&quot;saveButtonClicked&quot;&#10;&#9;&#9;&#9;value=&quot;#{cc.attrs.manageStateBean.saveButtonClicked}&quot; /&gt;&#10;&#10;&#9;&#9;&lt;p:commandButton value=&quot;#{cc.attrs.saveStateLabel}&quot;&#10;&#9;&#9;&#9;styleClass=&quot;top-buttons&quot; id=&quot;saveTableStateBtn&quot;&#10;&#9;&#9;&#9;action=&quot;#{cc.attrs.manageStateBean.saveTableState}&quot;&#10;&#9;&#9;&#9;process=&quot;#{cc.clientId}:stateNameInput :#{cc.clientId}:#{cc.attrs.tableId} #{cc.clientId}:saveButtonClicked&quot;&#10;&#9;&#9;&#9;update=&quot;#{cc.clientId}:extendedTableGrowlMsg #{cc.clientId}:stateNameInput&quot;&#10;&#9;&#9;&#9;onclick=&quot;document.getElementById('#{cc.clientId}:saveButtonClicked').value='true';&quot;&gt;&#10;&#9;&#9;&lt;/p:commandButton&gt;&#10;&#10;&#9;&#9;&lt;p:commandButton value=&quot;#{cc.attrs.restoreStateLabel}&quot;&#10;&#9;&#9;&#9;id=&quot;restoreStateBtn&quot; styleClass=&quot;top-buttons&quot;&#10;&#9;&#9;&#9;process=&quot;#{cc.clientId}:stateNameInput&quot;&#10;&#9;&#9;&#9;action=&quot;#{cc.attrs.manageStateBean.restoreTableState}&quot;&#10;&#9;&#9;&#9;update=&quot;:#{cc.clientId}:#{cc.attrs.tableId} #{cc.clientId}:extendedTableGrowlMsg #{cc.clientId}:stateNameInput&quot;&#10;&#9;&#9;&#9;onclick=&quot;PF('#{cc.attrs.widgetVar}').clearFilters();&quot; /&gt;&#10;&#10;&#9;&#9;&lt;p:commandButton value=&quot;#{cc.attrs.deleteStateLabel}&quot;&#10;&#9;&#9;&#9;styleClass=&quot;top-buttons&quot;&#10;&#9;&#9;&#9;action=&quot;#{cc.attrs.manageStateBean.deleteTableState}&quot;&#10;&#9;&#9;&#9;rendered=&quot;#{cc.attrs.showDeleteButton}&quot; process=&quot;stateNameInput&quot;&#10;&#9;&#9;&#9;update=&quot;#{cc.clientId}:#{cc.attrs.tableId} #{cc.clientId}:extendedTableGrowlMsg #{cc.clientId}:stateNameInput&quot; /&gt;&#10;&#10;&#9;&#9;&lt;p:commandButton value=&quot;#{cc.attrs.resetTableLabel}&quot; id=&quot;resetButton&quot;&#10;&#9;&#9;&#9;styleClass=&quot;top-buttons&quot; rendered=&quot;#{cc.attrs.showResetButton}&quot;&#10;&#9;&#9;&#9;process=&quot;@this&quot;&#10;&#9;&#9;&#9;actionListener=&quot;#{cc.attrs.manageStateBean.resetTable}&quot;&#10;&#9;&#9;&#9;update=&quot;#{cc.clientId}:stateNameInput #{cc.clientId}:#{cc.attrs.tableId} #{cc.clientId}:extendedTableGrowlMsg&quot;&#10;&#9;&#9;&#9;onclick=&quot;PF('#{cc.attrs.widgetVar}').clearFilters();&quot;&gt;&#10;&#9;&#9;&#9;&lt;p:resetInput target=&quot;#{cc.clientId}:stateNameInput&quot;&gt;&lt;/p:resetInput&gt;&#10;&#9;&#9;&lt;/p:commandButton&gt;&#10;&#9;&lt;/p:outputPanel&gt;&#10;&#10;&#9;&lt;c:choose&gt;&#10;&#9;&#9;&lt;c:when&#10;&#9;&#9;&#9;test=&quot;#{(cc.attrs.selectionMode eq 'single' or cc.attrs.selectionMode eq 'multiple')}&quot;&gt;&#10;&#9;&#9;&#9;&lt;p:dataTable id=&quot;#{cc.attrs.tableId}&quot;&#10;&#9;&#9;&#9;&#9;widgetVar=&quot;#{cc.attrs.widgetVar}&quot; value=&quot;#{cc.attrs.value}&quot;&#10;&#9;&#9;&#9;&#9;var=&quot;item&quot; rowKey=&quot;#{cc.attrs.rowKey}&quot;&#10;&#9;&#9;&#9;&#9;selection=&quot;#{cc.attrs.selection}&quot;&#10;&#9;&#9;&#9;&#9;selectionMode=&quot;#{cc.attrs.selectionMode}&quot; multiViewState=&quot;true&quot;&#10;&#9;&#9;&#9;&#9;paginator=&quot;#{cc.attrs.paginator}&quot; rows=&quot;#{cc.attrs.rows}&quot;&#10;&#9;&#9;&#9;&#9;sortMode=&quot;#{cc.attrs.sortMode}&quot;&#10;&#9;&#9;&#9;&#9;emptyMessage=&quot;#{cc.attrs.emptyMessage}&quot;&#10;&#9;&#9;&#9;&#9;allowUnsorting=&quot;#{allowUnsorting}&quot; ariaRowLabel=&quot;#{ariaRowLabel}&quot;&#10;&#9;&#9;&#9;&#9;binding=&quot;#{cc.attrs.binding}&quot;&#10;&#9;&#9;&#9;&#9;cellEditMode=&quot;#{cc.attrs.cellEditMode}&quot;&#10;&#9;&#9;&#9;&#9;cellSeparator=&quot;#{cc.attrs.cellSeparator}&quot;&#10;&#9;&#9;&#9;&#9;clientCache=&quot;#{cc.attrs.clientCache}&quot;&#10;&#9;&#9;&#9;&#9;currentPageReportTemplate=&quot;#{cc.attrs.currentPageReportTemplate}&quot;&#10;&#9;&#9;&#9;&#9;dataLocale=&quot;#{cc.attrs.dataLocale}&quot; dir=&quot;#{cc.attrs.dir}&quot;&#10;&#9;&#9;&#9;&#9;disableContextMenuIfEmpty=&quot;#{cc.attrs.disableContextMenuIfEmpty}&quot;&#10;&#9;&#9;&#9;&#9;disabledSelection=&quot;#{cc.attrs.disabledSelection}&quot;&#10;&#9;&#9;&#9;&#9;disabledTextSelection=&quot;#{cc.attrs.disabledTextSelection}&quot;&#10;&#9;&#9;&#9;&#9;draggableColumns=&quot;#{cc.attrs.draggableColumns}&quot;&#10;&#9;&#9;&#9;&#9;draggableRows=&quot;#{cc.attrs.draggableRows}&quot;&#10;&#9;&#9;&#9;&#9;draggableRowsFunction=&quot;#{cc.attrs.draggableRowsFunction}&quot;&#10;&#9;&#9;&#9;&#9;editInitEvent=&quot;#{cc.attrs.editInitEvent}&quot;&#10;&#9;&#9;&#9;&#9;editMode=&quot;#{cc.attrs.editMode}&quot; editable=&quot;#{cc.attrs.editable}&quot;&#10;&#9;&#9;&#9;&#9;editingRow=&quot;#{cc.attrs.editingRow}&quot;&#10;&#9;&#9;&#9;&#9;escapeText=&quot;#{cc.attrs.escapeText}&quot;&#10;&#9;&#9;&#9;&#9;expandedRow=&quot;#{cc.attrs.expandedRow}&quot;&#10;&#9;&#9;&#9;&#9;filterBy=&quot;#{cc.attrs.filterBy}&quot;&#10;&#9;&#9;&#9;&#9;filterDelay=&quot;#{cc.attrs.filterDelay}&quot;&#10;&#9;&#9;&#9;&#9;filterEvent=&quot;#{cc.attrs.filterEvent}&quot;&#10;&#9;&#9;&#9;&#9;filteredValue=&quot;#{cc.attrs.filteredValue}&quot; first=&quot;#{cc.attrs.first}&quot;&#10;&#9;&#9;&#9;&#9;frozenColumns=&quot;#{cc.attrs.frozenColumns}&quot;&#10;&#9;&#9;&#9;&#9;frozenRows=&quot;#{cc.attrs.frozenRows}&quot;&#10;&#9;&#9;&#9;&#9;globalFilter=&quot;#{cc.attrs.globalFilter}&quot;&#10;&#9;&#9;&#9;&#9;globalFilterOnly=&quot;#{cc.attrs.globalFilterOnly}&quot;&#10;&#9;&#9;&#9;&#9;globalFilterFunction=&quot;#{cc.attrs.globalFilterFunction}&quot;&#10;&#9;&#9;&#9;&#9;lazy=&quot;#{cc.attrs.lazy}&quot; liveResize=&quot;#{cc.attrs.liveResize}&quot;&#10;&#9;&#9;&#9;&#9;liveScroll=&quot;#{cc.attrs.liveScroll}&quot;&#10;&#9;&#9;&#9;&#9;liveScrollBuffer=&quot;#{cc.attrs.liveScrollBuffer}&quot;&#10;&#9;&#9;&#9;&#9;initMode=&quot;#{cc.attrs.initMode}&quot;&#10;&#9;&#9;&#9;&#9;nativeElements=&quot;#{cc.attrs.nativeElements}&quot;&#10;&#9;&#9;&#9;&#9;onExpandStart=&quot;#{cc.attrs.onExpandStart}&quot;&#10;&#9;&#9;&#9;&#9;onRowClick=&quot;#{cc.attrs.onRowClick}&quot;&#10;&#9;&#9;&#9;&#9;pageLinks=&quot;#{cc.attrs.pageLinks}&quot;&#10;&#9;&#9;&#9;&#9;paginatorAlwaysVisible=&quot;#{cc.attrs.paginatorAlwaysVisible}&quot;&#10;&#9;&#9;&#9;&#9;paginatorPosition=&quot;#{cc.attrs.paginatorPosition}&quot;&#10;&#9;&#9;&#9;&#9;paginatorTemplate=&quot;#{cc.attrs.paginatorTemplate}&quot;&#10;&#9;&#9;&#9;&#9;reflow=&quot;#{cc.attrs.reflow}&quot; rendered=&quot;#{cc.attrs.rendered}&quot;&#10;&#9;&#9;&#9;&#9;renderEmptyFacets=&quot;#{cc.attrs.renderEmptyFacets}&quot;&#10;&#9;&#9;&#9;&#9;resizableColumns=&quot;#{cc.attrs.resizableColumns}&quot;&#10;&#9;&#9;&#9;&#9;resizeMode=&quot;#{cc.attrs.resizeMode}&quot;&#10;&#9;&#9;&#9;&#9;rowDragSelector=&quot;#{cc.attrs.rowDragSelector}&quot;&#10;&#9;&#9;&#9;&#9;rowEditMode=&quot;#{cc.attrs.rowEditMode}&quot;&#10;&#9;&#9;&#9;&#9;rowExpandMode=&quot;#{cc.attrs.rowExpandMode}&quot;&#10;&#9;&#9;&#9;&#9;rowHover=&quot;#{cc.attrs.rowHover}&quot;&#10;&#9;&#9;&#9;&#9;rowIndexVar=&quot;#{cc.attrs.rowIndexVar}&quot;&#10;&#9;&#9;&#9;&#9;rowSelectMode=&quot;#{cc.attrs.rowSelectMode}&quot;&#10;&#9;&#9;&#9;&#9;rowSelector=&quot;#{cc.attrs.rowSelector}&quot;&#10;&#9;&#9;&#9;&#9;rowStatePreserved=&quot;#{cc.attrs.rowStatePreserved}&quot;&#10;&#9;&#9;&#9;&#9;rowStyleClass=&quot;#{cc.attrs.rowStyleClass}&quot;&#10;&#9;&#9;&#9;&#9;rowsPerPageLabel=&quot;#{cc.attrs.rowsPerPageLabel}&quot;&#10;&#9;&#9;&#9;&#9;rowsPerPageTemplate=&quot;#{cc.attrs.rowsPerPageTemplate}&quot;&#10;&#9;&#9;&#9;&#9;saveOnCellBlur=&quot;#{cc.attrs.saveOnCellBlur}&quot;&#10;&#9;&#9;&#9;&#9;scrollHeight=&quot;#{cc.attrs.scrollHeight}&quot;&#10;&#9;&#9;&#9;&#9;scrollRows=&quot;#{cc.attrs.scrollRows}&quot;&#10;&#9;&#9;&#9;&#9;scrollWidth=&quot;#{cc.attrs.scrollWidth}&quot;&#10;&#9;&#9;&#9;&#9;scrollable=&quot;#{cc.attrs.scrollable}&quot;&#10;&#9;&#9;&#9;&#9;selectionPageOnly=&quot;#{cc.attrs.selectionPageOnly}&quot;&#10;&#9;&#9;&#9;&#9;showGridlines=&quot;#{cc.attrs.showGridlines}&quot;&#10;&#9;&#9;&#9;&#9;showSelectAll=&quot;#{cc.attrs.showSelectAll}&quot; size=&quot;#{cc.attrs.size}&quot;&#10;&#9;&#9;&#9;&#9;sortBy=&quot;#{cc.attrs.sortBy}&quot; skipChildren=&quot;#{cc.attrs.skipChildren}&quot;&#10;&#9;&#9;&#9;&#9;stickyHeader=&quot;#{cc.attrs.stickyHeader}&quot;&#10;&#9;&#9;&#9;&#9;stickyTopAt=&quot;#{cc.attrs.stickyTopAt}&quot;&#10;&#9;&#9;&#9;&#9;stripedRows=&quot;#{cc.attrs.stripedRows}&quot; style=&quot;#{cc.attrs.style}&quot;&#10;&#9;&#9;&#9;&#9;styleClass=&quot;#{cc.attrs.styleClass}&quot; summary=&quot;#{cc.attrs.summary}&quot;&#10;&#9;&#9;&#9;&#9;tabindex=&quot;#{cc.attrs.tabindex}&quot; tableStyle=&quot;#{cc.attrs.tableStyle}&quot;&#10;&#9;&#9;&#9;&#9;tableStyleClass=&quot;#{cc.attrs.tableStyleClass}&quot;&#10;&#9;&#9;&#9;&#9;virtualScroll=&quot;#{cc.attrs.virtualScroll}&quot;&#10;&#9;&#9;&#9;&#9;touchable=&quot;#{cc.attrs.touchable}&quot;&#10;&#9;&#9;&#9;&#9;partialUpdate=&quot;#{cc.attrs.partialUpdate}&quot;&gt;&#10;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;event&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertChildren /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;header&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;footer&quot; /&gt;&#10;&#10;&#9;&#9;&#9;&lt;/p:dataTable&gt;&#10;&#9;&#9;&lt;/c:when&gt;&#10;&#9;&#9;&lt;c:otherwise&gt;&#10;&#9;&#9;&#9;&lt;p:dataTable id=&quot;#{cc.attrs.tableId}&quot;&#10;&#9;&#9;&#9;&#9;widgetVar=&quot;#{cc.attrs.widgetVar}&quot; value=&quot;#{cc.attrs.value}&quot;&#10;&#9;&#9;&#9;&#9;var=&quot;item&quot; multiViewState=&quot;true&quot; paginator=&quot;#{cc.attrs.paginator}&quot;&#10;&#9;&#9;&#9;&#9;rows=&quot;#{cc.attrs.rows}&quot; rowKey=&quot;#{cc.attrs.rowKey}&quot;&#10;&#9;&#9;&#9;&#9;sortMode=&quot;#{cc.attrs.sortMode}&quot;&#10;&#9;&#9;&#9;&#9;emptyMessage=&quot;#{cc.attrs.emptyMessage}&quot;&#10;&#9;&#9;&#9;&#9;allowUnsorting=&quot;#{allowUnsorting}&quot; ariaRowLabel=&quot;#{ariaRowLabel}&quot;&#10;&#9;&#9;&#9;&#9;binding=&quot;#{cc.attrs.binding}&quot;&#10;&#9;&#9;&#9;&#9;cellEditMode=&quot;#{cc.attrs.cellEditMode}&quot;&#10;&#9;&#9;&#9;&#9;cellSeparator=&quot;#{cc.attrs.cellSeparator}&quot;&#10;&#9;&#9;&#9;&#9;clientCache=&quot;#{cc.attrs.clientCache}&quot;&#10;&#9;&#9;&#9;&#9;currentPageReportTemplate=&quot;#{cc.attrs.currentPageReportTemplate}&quot;&#10;&#9;&#9;&#9;&#9;dataLocale=&quot;#{cc.attrs.dataLocale}&quot; dir=&quot;#{cc.attrs.dir}&quot;&#10;&#9;&#9;&#9;&#9;disableContextMenuIfEmpty=&quot;#{cc.attrs.disableContextMenuIfEmpty}&quot;&#10;&#9;&#9;&#9;&#9;disabledSelection=&quot;#{cc.attrs.disabledSelection}&quot;&#10;&#9;&#9;&#9;&#9;disabledTextSelection=&quot;#{cc.attrs.disabledTextSelection}&quot;&#10;&#9;&#9;&#9;&#9;draggableColumns=&quot;#{cc.attrs.draggableColumns}&quot;&#10;&#9;&#9;&#9;&#9;draggableRows=&quot;#{cc.attrs.draggableRows}&quot;&#10;&#9;&#9;&#9;&#9;draggableRowsFunction=&quot;#{cc.attrs.draggableRowsFunction}&quot;&#10;&#9;&#9;&#9;&#9;editInitEvent=&quot;#{cc.attrs.editInitEvent}&quot;&#10;&#9;&#9;&#9;&#9;editMode=&quot;#{cc.attrs.editMode}&quot; editable=&quot;#{cc.attrs.editable}&quot;&#10;&#9;&#9;&#9;&#9;editingRow=&quot;#{cc.attrs.editingRow}&quot;&#10;&#9;&#9;&#9;&#9;escapeText=&quot;#{cc.attrs.escapeText}&quot;&#10;&#9;&#9;&#9;&#9;expandedRow=&quot;#{cc.attrs.expandedRow}&quot;&#10;&#9;&#9;&#9;&#9;filterBy=&quot;#{cc.attrs.filterBy}&quot;&#10;&#9;&#9;&#9;&#9;filterDelay=&quot;#{cc.attrs.filterDelay}&quot;&#10;&#9;&#9;&#9;&#9;filterEvent=&quot;#{cc.attrs.filterEvent}&quot;&#10;&#9;&#9;&#9;&#9;filteredValue=&quot;#{cc.attrs.filteredValue}&quot; first=&quot;#{cc.attrs.first}&quot;&#10;&#9;&#9;&#9;&#9;frozenColumns=&quot;#{cc.attrs.frozenColumns}&quot;&#10;&#9;&#9;&#9;&#9;frozenRows=&quot;#{cc.attrs.frozenRows}&quot;&#10;&#9;&#9;&#9;&#9;globalFilter=&quot;#{cc.attrs.globalFilter}&quot;&#10;&#9;&#9;&#9;&#9;globalFilterOnly=&quot;#{cc.attrs.globalFilterOnly}&quot;&#10;&#9;&#9;&#9;&#9;globalFilterFunction=&quot;#{cc.attrs.globalFilterFunction}&quot;&#10;&#9;&#9;&#9;&#9;lazy=&quot;#{cc.attrs.lazy}&quot; liveResize=&quot;#{cc.attrs.liveResize}&quot;&#10;&#9;&#9;&#9;&#9;liveScroll=&quot;#{cc.attrs.liveScroll}&quot;&#10;&#9;&#9;&#9;&#9;liveScrollBuffer=&quot;#{cc.attrs.liveScrollBuffer}&quot;&#10;&#9;&#9;&#9;&#9;initMode=&quot;#{cc.attrs.initMode}&quot;&#10;&#9;&#9;&#9;&#9;nativeElements=&quot;#{cc.attrs.nativeElements}&quot;&#10;&#9;&#9;&#9;&#9;onExpandStart=&quot;#{cc.attrs.onExpandStart}&quot;&#10;&#9;&#9;&#9;&#9;onRowClick=&quot;#{cc.attrs.onRowClick}&quot;&#10;&#9;&#9;&#9;&#9;pageLinks=&quot;#{cc.attrs.pageLinks}&quot;&#10;&#9;&#9;&#9;&#9;paginatorAlwaysVisible=&quot;#{cc.attrs.paginatorAlwaysVisible}&quot;&#10;&#9;&#9;&#9;&#9;paginatorPosition=&quot;#{cc.attrs.paginatorPosition}&quot;&#10;&#9;&#9;&#9;&#9;paginatorTemplate=&quot;#{cc.attrs.paginatorTemplate}&quot;&#10;&#9;&#9;&#9;&#9;reflow=&quot;#{cc.attrs.reflow}&quot; rendered=&quot;#{cc.attrs.rendered}&quot;&#10;&#9;&#9;&#9;&#9;renderEmptyFacets=&quot;#{cc.attrs.renderEmptyFacets}&quot;&#10;&#9;&#9;&#9;&#9;resizableColumns=&quot;#{cc.attrs.resizableColumns}&quot;&#10;&#9;&#9;&#9;&#9;resizeMode=&quot;#{cc.attrs.resizeMode}&quot;&#10;&#9;&#9;&#9;&#9;rowDragSelector=&quot;#{cc.attrs.rowDragSelector}&quot;&#10;&#9;&#9;&#9;&#9;rowEditMode=&quot;#{cc.attrs.rowEditMode}&quot;&#10;&#9;&#9;&#9;&#9;rowExpandMode=&quot;#{cc.attrs.rowExpandMode}&quot;&#10;&#9;&#9;&#9;&#9;rowHover=&quot;#{cc.attrs.rowHover}&quot;&#10;&#9;&#9;&#9;&#9;rowIndexVar=&quot;#{cc.attrs.rowIndexVar}&quot;&#10;&#9;&#9;&#9;&#9;rowSelectMode=&quot;#{cc.attrs.rowSelectMode}&quot;&#10;&#9;&#9;&#9;&#9;rowSelector=&quot;#{cc.attrs.rowSelector}&quot;&#10;&#9;&#9;&#9;&#9;rowStatePreserved=&quot;#{cc.attrs.rowStatePreserved}&quot;&#10;&#9;&#9;&#9;&#9;rowStyleClass=&quot;#{cc.attrs.rowStyleClass}&quot;&#10;&#9;&#9;&#9;&#9;rowsPerPageLabel=&quot;#{cc.attrs.rowsPerPageLabel}&quot;&#10;&#9;&#9;&#9;&#9;rowsPerPageTemplate=&quot;#{cc.attrs.rowsPerPageTemplate}&quot;&#10;&#9;&#9;&#9;&#9;saveOnCellBlur=&quot;#{cc.attrs.saveOnCellBlur}&quot;&#10;&#9;&#9;&#9;&#9;scrollHeight=&quot;#{cc.attrs.scrollHeight}&quot;&#10;&#9;&#9;&#9;&#9;scrollRows=&quot;#{cc.attrs.scrollRows}&quot;&#10;&#9;&#9;&#9;&#9;scrollWidth=&quot;#{cc.attrs.scrollWidth}&quot;&#10;&#9;&#9;&#9;&#9;scrollable=&quot;#{cc.attrs.scrollable}&quot;&#10;&#9;&#9;&#9;&#9;showGridlines=&quot;#{cc.attrs.showGridlines}&quot;&#10;&#9;&#9;&#9;&#9;showSelectAll=&quot;#{cc.attrs.showSelectAll}&quot; size=&quot;#{cc.attrs.size}&quot;&#10;&#9;&#9;&#9;&#9;sortBy=&quot;#{cc.attrs.sortBy}&quot; skipChildren=&quot;#{cc.attrs.skipChildren}&quot;&#10;&#9;&#9;&#9;&#9;stickyHeader=&quot;#{cc.attrs.stickyHeader}&quot;&#10;&#9;&#9;&#9;&#9;stickyTopAt=&quot;#{cc.attrs.stickyTopAt}&quot;&#10;&#9;&#9;&#9;&#9;stripedRows=&quot;#{cc.attrs.stripedRows}&quot; style=&quot;#{cc.attrs.style}&quot;&#10;&#9;&#9;&#9;&#9;styleClass=&quot;#{cc.attrs.styleClass}&quot; summary=&quot;#{cc.attrs.summary}&quot;&#10;&#9;&#9;&#9;&#9;tabindex=&quot;#{cc.attrs.tabindex}&quot; tableStyle=&quot;#{cc.attrs.tableStyle}&quot;&#10;&#9;&#9;&#9;&#9;tableStyleClass=&quot;#{cc.attrs.tableStyleClass}&quot;&#10;&#9;&#9;&#9;&#9;virtualScroll=&quot;#{cc.attrs.virtualScroll}&quot;&#10;&#9;&#9;&#9;&#9;touchable=&quot;#{cc.attrs.touchable}&quot;&#10;&#9;&#9;&#9;&#9;partialUpdate=&quot;#{cc.attrs.partialUpdate}&quot;&gt;&#10;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;event&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertChildren /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;header&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;footer&quot; /&gt;&#10;&#10;&#9;&#9;&#9;&lt;/p:dataTable&gt;&#10;&#9;&#9;&lt;/c:otherwise&gt;&#10;&#9;&lt;/c:choose&gt;&#10;&#10;&lt;/cc:implementation&gt;&#10;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&#10;&#9;xmlns:f=&quot;http://xmlns.jcp.org/jsf/core&quot;&#10;&#9;xmlns:h=&quot;http://xmlns.jcp.org/jsf/html&quot;&#10;&#9;xmlns:ui=&quot;http://xmlns.jcp.org/jsf/facelets&quot;&#10;&#9;xmlns:cc=&quot;http://xmlns.jcp.org/jsf/composite&quot;&#10;&#9;xmlns:ic=&quot;http://ivyteam.ch/jsf/component&quot;&#10;&#9;xmlns:p=&quot;http://primefaces.org/ui&quot;&#10;&#9;xmlns:c=&quot;http://java.sun.com/jsp/jstl/core&quot;&#10;&#9;xmlns:pe=&quot;http://primefaces.org/ui/extensions&quot;&gt;&#10;&lt;cc:interface componentType=&quot;IvyComponent&quot;&gt;&#10;&#9;&lt;!-- &#10;&#9;PROBLEMS: &#10;&#9;1. var=&quot;item&quot; is fixed =&gt; rowKey=&quot;#{item.id}&quot; is not flexible in naming&#10;&#9;2. Must switch for row selection/none selection&#10;&#9; --&gt;&#10;&#10;&#9;&lt;!-- Manage State Bean --&gt;&#10;&#9;&lt;cc:attribute name=&quot;manageStateBean&quot; required=&quot;true&quot;&#10;&#9;&#9;type=&quot;com.axonivy.market.extendedtable.DataTableStateBean&quot; /&gt;&#10;&#10;&#9;&lt;!-- State Repository --&gt;&#10;&#9;&lt;cc:attribute name=&quot;dataTableStateRepository&quot; required=&quot;false&quot;&#10;&#9;&#9;type=&quot;com.axonivy.market.extendedtable.repo.DataTableStateRepository&quot;&#10;&#9;&#9;shortDescription=&quot;Repo to persist/fetch the table state, default will be the SessionDataTableStateRepository.&quot; /&gt;&#10;&#10;&#9;&lt;!-- UI Labels --&gt;&#10;&#9;&lt;cc:attribute name=&quot;stateNameLabel&quot; default=&quot;State Name&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;resetTableLabel&quot; default=&quot;Reset Table&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;saveStateLabel&quot; default=&quot;Save Table State&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;restoreStateLabel&quot; default=&quot;Restore Table State&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;deleteStateLabel&quot; default=&quot;Delete Table State&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;stateNameRequiredMsg&quot;&#10;&#9;&#9;default=&quot;State name is required&quot;&gt;&lt;/cc:attribute&gt;&#10;&#10;&#9;&lt;cc:attribute name=&quot;showResetButton&quot; default=&quot;false&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;showDeleteButton&quot; default=&quot;false&quot;&gt;&lt;/cc:attribute&gt;&#10;&#10;&#9;&lt;!-- Datatable mapping --&gt;&#10;&#9;&lt;cc:attribute name=&quot;tableId&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;widgetVar&quot;&gt;&lt;/cc:attribute&gt;&#10;&#9;&lt;cc:attribute name=&quot;value&quot; required=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;paginator&quot; default=&quot;false&quot;&#10;&#9;&#9;shortDescription=&quot;Enables pagination. Default is false.&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rows&quot; default=&quot;0&quot;&#10;&#9;&#9;shortDescription=&quot;Number of rows to display per page. Default value is 0 meaning to display all data available.&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;sortMode&quot; default=&quot;single&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;emptyMessage&quot; default=&quot;No records found.&quot; /&gt;&#10;&#10;&#9;&lt;cc:attribute name=&quot;allowUnsorting&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;ariaRowLabel&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;binding&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;cellEditMode&quot; default=&quot;eager&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;cellSeparator&quot; /&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;clientCache&quot; default=&quot;false&quot; /&gt; --&gt;&#10;&#9;&lt;cc:attribute name=&quot;currentPageReportTemplate&quot;&#10;&#9;&#9;default=&quot;{startRecord}-{endRecord} of {totalRecords} records&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;dataLocale&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;dir&quot; default=&quot;ltr&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;disableContextMenuIfEmpty&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;disabledSelection&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;disabledTextSelection&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;draggableColumns&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;draggableRows&quot; default=&quot;false&quot; /&gt; --&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;draggableRowsFunction&quot; /&gt; --&gt;&#10;&#9;&lt;cc:attribute name=&quot;editInitEvent&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;editMode&quot; default=&quot;row&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;editable&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;editingRow&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;escapeText&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;expandedRow&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;filterBy&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;filterDelay&quot; default=&quot;300&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;filterEvent&quot; default=&quot;keyup&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;filteredValue&quot; required=&quot;false&quot;&#10;&#9;&#9;type=&quot;java.util.List&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;first&quot; default=&quot;0&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;frozenColumns&quot; default=&quot;0&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;frozenRows&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;globalFilter&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;globalFilterOnly&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;globalFilterFunction&quot; /&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;id&quot; /&gt; Replaced by tableId attr--&gt;&#10;&#9;&lt;cc:attribute name=&quot;lazy&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;liveResize&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;liveScroll&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;liveScrollBuffer&quot; default=&quot;0&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;multiViewState&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;nativeElements&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;onExpandStart&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;onRowClick&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;pageLinks&quot; default=&quot;10&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;paginatorAlwaysVisible&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;paginatorPosition&quot; default=&quot;both&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;paginatorTemplate&quot;&#10;&#9;&#9;default=&quot;{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;reflow&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rendered&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;renderEmptyFacets&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;resizableColumns&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;resizeMode&quot; default=&quot;fit&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowDragSelector&quot; default=&quot;td,span:not(.ui-c)&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowEditMode&quot; default=&quot;eager&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowExpandMode&quot; default=&quot;multiple&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowHover&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowIndexVar&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowKey&quot; required=&quot;false&quot; default=&quot;#{item.id}&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowSelectMode&quot; default=&quot;new&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowSelector&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowStatePreserved&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowStyleClass&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowsPerPageLabel&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;rowsPerPageTemplate&quot; default=&quot;5,10,{ShowAll|'All'}&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;saveOnCellBlur&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;scrollHeight&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;scrollRows&quot; default=&quot;0&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;scrollWidth&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;scrollable&quot; default=&quot;false&quot; /&gt;&#10;&#10;&#9;&lt;cc:attribute name=&quot;selectionMode&quot; type=&quot;java.lang.String&quot; default=&quot;&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;selection&quot; type=&quot;java.lang.Object&quot; required=&quot;false&quot; /&gt;&#10;&#10;&#9;&lt;cc:attribute name=&quot;selectionPageOnly&quot; default=&quot;true&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;showGridlines&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;size&quot; default=&quot;regular&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;sortBy&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;skipChildren&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;stickyHeader&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;stickyTopAt&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;stripedRows&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;style&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;styleClass&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;summary&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;tabindex&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;tableStyle&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;tableStyleClass&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;value&quot; required=&quot;true&quot; /&gt;&#10;&#9;&lt;!-- &lt;cc:attribute name=&quot;var&quot; default=&quot;item&quot; type=&quot;&quot;/&gt; --&gt;&#10;&#9;&lt;cc:attribute name=&quot;virtualScroll&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;touchable&quot; default=&quot;false&quot; /&gt;&#10;&#9;&lt;cc:attribute name=&quot;partialUpdate&quot; default=&quot;true&quot; /&gt;&#10;&lt;/cc:interface&gt;&#10;&#10;&lt;cc:implementation&gt;&#10;&#9;&lt;style&gt;&#10;.top-buttons {&#10;&#9;margin-left: 8px;&#10;}&#10;&lt;/style&gt;&#10;&#10;&#9;&lt;p:growl id=&quot;extendedTableGrowlMsg&quot;&gt;&lt;/p:growl&gt;&#10;&#10;&#9;&lt;p:outputPanel style=&quot;margin-bottom: 10px; text-align:right;&quot;&#10;&#9;&#9;id=&quot;tableStatePanel&quot;&gt;&#10;&#9;&#9;&lt;p:outputLabel for=&quot;stateNameInput&quot; value=&quot;#{cc.attrs.stateNameLabel}&quot; /&gt;&#10;&#9;&#9;&lt;p:autoComplete id=&quot;stateNameInput&quot;&#10;&#9;&#9;&#9;required=&quot;#{not empty cc.attrs.manageStateBean.saveButtonClicked}&quot;&#10;&#9;&#9;&#9;value=&quot;#{cc.attrs.manageStateBean.stateName}&quot;&#10;&#9;&#9;&#9;completeMethod=&quot;#{cc.attrs.manageStateBean.completeStateName}&quot;&#10;&#9;&#9;&#9;dropdown=&quot;true&quot; forceSelection=&quot;false&quot; multiple=&quot;false&quot;&#10;&#9;&#9;&#9;placeholder=&quot;Enter or select state name&quot; var=&quot;name&quot;&#10;&#9;&#9;&#9;itemLabel=&quot;#{name}&quot; itemValue=&quot;#{name}&quot; minQueryLength=&quot;3&quot;&#10;&#9;&#9;&#9;requiredMessage=&quot;#{cc.attrs.stateNameRequiredMsg}&quot;&#10;&#9;&#9;&#9;style=&quot;width:250px; margin: 0px 30px&quot; /&gt;&#10;&#10;&#9;&#9;&lt;h:inputHidden id=&quot;saveButtonClicked&quot;&#10;&#9;&#9;&#9;value=&quot;#{cc.attrs.manageStateBean.saveButtonClicked}&quot; /&gt;&#10;&#10;&#9;&#9;&lt;p:commandButton value=&quot;#{cc.attrs.saveStateLabel}&quot;&#10;&#9;&#9;&#9;styleClass=&quot;top-buttons&quot; id=&quot;saveTableStateBtn&quot;&#10;&#9;&#9;&#9;action=&quot;#{cc.attrs.manageStateBean.saveTableState}&quot;&#10;&#9;&#9;&#9;process=&quot;#{cc.clientId}:stateNameInput :#{cc.clientId}:#{cc.attrs.tableId} #{cc.clientId}:saveButtonClicked&quot;&#10;&#9;&#9;&#9;update=&quot;#{cc.clientId}:extendedTableGrowlMsg #{cc.clientId}:stateNameInput&quot;&#10;&#9;&#9;&#9;onclick=&quot;document.getElementById('#{cc.clientId}:saveButtonClicked').value='true';&quot;&gt;&#10;&#9;&#9;&lt;/p:commandButton&gt;&#10;&#10;&#9;&#9;&lt;p:commandButton value=&quot;#{cc.attrs.restoreStateLabel}&quot;&#10;&#9;&#9;&#9;id=&quot;restoreStateBtn&quot; styleClass=&quot;top-buttons&quot;&#10;&#9;&#9;&#9;process=&quot;#{cc.clientId}:stateNameInput&quot;&#10;&#9;&#9;&#9;action=&quot;#{cc.attrs.manageStateBean.restoreTableState}&quot;&#10;&#9;&#9;&#9;update=&quot;:#{cc.clientId}:#{cc.attrs.tableId} #{cc.clientId}:extendedTableGrowlMsg #{cc.clientId}:stateNameInput&quot;&#10;&#9;&#9;&#9;onclick=&quot;PF('#{cc.attrs.widgetVar}').clearFilters();&quot; /&gt;&#10;&#10;&#9;&#9;&lt;p:commandButton value=&quot;#{cc.attrs.deleteStateLabel}&quot;&#10;&#9;&#9;&#9;styleClass=&quot;top-buttons&quot;&#10;&#9;&#9;&#9;action=&quot;#{cc.attrs.manageStateBean.deleteTableState}&quot;&#10;&#9;&#9;&#9;rendered=&quot;#{cc.attrs.showDeleteButton}&quot; process=&quot;stateNameInput&quot;&#10;&#9;&#9;&#9;update=&quot;#{cc.clientId}:#{cc.attrs.tableId} #{cc.clientId}:extendedTableGrowlMsg #{cc.clientId}:stateNameInput&quot; /&gt;&#10;&#10;&#9;&#9;&lt;p:commandButton value=&quot;#{cc.attrs.resetTableLabel}&quot; id=&quot;resetButton&quot;&#10;&#9;&#9;&#9;styleClass=&quot;top-buttons&quot; rendered=&quot;#{cc.attrs.showResetButton}&quot;&#10;&#9;&#9;&#9;process=&quot;@this&quot;&#10;&#9;&#9;&#9;actionListener=&quot;#{cc.attrs.manageStateBean.resetTable}&quot;&#10;&#9;&#9;&#9;update=&quot;#{cc.clientId}:stateNameInput #{cc.clientId}:#{cc.attrs.tableId} #{cc.clientId}:extendedTableGrowlMsg&quot;&#10;&#9;&#9;&#9;onclick=&quot;PF('#{cc.attrs.widgetVar}').clearFilters();&quot;&gt;&#10;&#9;&#9;&#9;&lt;p:resetInput target=&quot;#{cc.clientId}:stateNameInput&quot;&gt;&lt;/p:resetInput&gt;&#10;&#9;&#9;&lt;/p:commandButton&gt;&#10;&#9;&lt;/p:outputPanel&gt;&#10;&#10;&#9;&lt;c:choose&gt;&#10;&#9;&#9;&lt;c:when&#10;&#9;&#9;&#9;test=&quot;#{(cc.attrs.selectionMode eq 'single' or cc.attrs.selectionMode eq 'multiple')}&quot;&gt;&#10;&#9;&#9;&#9;&lt;p:dataTable id=&quot;#{cc.attrs.tableId}&quot;&#10;&#9;&#9;&#9;&#9;widgetVar=&quot;#{cc.attrs.widgetVar}&quot; value=&quot;#{cc.attrs.value}&quot;&#10;&#9;&#9;&#9;&#9;var=&quot;item&quot; rowKey=&quot;#{cc.attrs.rowKey}&quot;&#10;&#9;&#9;&#9;&#9;selection=&quot;#{cc.attrs.selection}&quot;&#10;&#9;&#9;&#9;&#9;selectionMode=&quot;#{cc.attrs.selectionMode}&quot; multiViewState=&quot;true&quot;&#10;&#9;&#9;&#9;&#9;paginator=&quot;#{cc.attrs.paginator}&quot; rows=&quot;#{cc.attrs.rows}&quot;&#10;&#9;&#9;&#9;&#9;sortMode=&quot;#{cc.attrs.sortMode}&quot;&#10;&#9;&#9;&#9;&#9;emptyMessage=&quot;#{cc.attrs.emptyMessage}&quot;&#10;&#9;&#9;&#9;&#9;allowUnsorting=&quot;#{allowUnsorting}&quot; ariaRowLabel=&quot;#{ariaRowLabel}&quot;&#10;&#9;&#9;&#9;&#9;binding=&quot;#{cc.attrs.binding}&quot;&#10;&#9;&#9;&#9;&#9;cellEditMode=&quot;#{cc.attrs.cellEditMode}&quot;&#10;&#9;&#9;&#9;&#9;cellSeparator=&quot;#{cc.attrs.cellSeparator}&quot;&#10;&#9;&#9;&#9;&#9;clientCache=&quot;#{cc.attrs.clientCache}&quot;&#10;&#9;&#9;&#9;&#9;currentPageReportTemplate=&quot;#{cc.attrs.currentPageReportTemplate}&quot;&#10;&#9;&#9;&#9;&#9;dataLocale=&quot;#{cc.attrs.dataLocale}&quot; dir=&quot;#{cc.attrs.dir}&quot;&#10;&#9;&#9;&#9;&#9;disableContextMenuIfEmpty=&quot;#{cc.attrs.disableContextMenuIfEmpty}&quot;&#10;&#9;&#9;&#9;&#9;disabledSelection=&quot;#{cc.attrs.disabledSelection}&quot;&#10;&#9;&#9;&#9;&#9;disabledTextSelection=&quot;#{cc.attrs.disabledTextSelection}&quot;&#10;&#9;&#9;&#9;&#9;draggableColumns=&quot;#{cc.attrs.draggableColumns}&quot;&#10;&#9;&#9;&#9;&#9;draggableRows=&quot;#{cc.attrs.draggableRows}&quot;&#10;&#9;&#9;&#9;&#9;draggableRowsFunction=&quot;#{cc.attrs.draggableRowsFunction}&quot;&#10;&#9;&#9;&#9;&#9;editInitEvent=&quot;#{cc.attrs.editInitEvent}&quot;&#10;&#9;&#9;&#9;&#9;editMode=&quot;#{cc.attrs.editMode}&quot; editable=&quot;#{cc.attrs.editable}&quot;&#10;&#9;&#9;&#9;&#9;editingRow=&quot;#{cc.attrs.editingRow}&quot;&#10;&#9;&#9;&#9;&#9;escapeText=&quot;#{cc.attrs.escapeText}&quot;&#10;&#9;&#9;&#9;&#9;expandedRow=&quot;#{cc.attrs.expandedRow}&quot;&#10;&#9;&#9;&#9;&#9;filterBy=&quot;#{cc.attrs.filterBy}&quot;&#10;&#9;&#9;&#9;&#9;filterDelay=&quot;#{cc.attrs.filterDelay}&quot;&#10;&#9;&#9;&#9;&#9;filterEvent=&quot;#{cc.attrs.filterEvent}&quot;&#10;&#9;&#9;&#9;&#9;filteredValue=&quot;#{cc.attrs.filteredValue}&quot; first=&quot;#{cc.attrs.first}&quot;&#10;&#9;&#9;&#9;&#9;frozenColumns=&quot;#{cc.attrs.frozenColumns}&quot;&#10;&#9;&#9;&#9;&#9;frozenRows=&quot;#{cc.attrs.frozenRows}&quot;&#10;&#9;&#9;&#9;&#9;globalFilter=&quot;#{cc.attrs.globalFilter}&quot;&#10;&#9;&#9;&#9;&#9;globalFilterOnly=&quot;#{cc.attrs.globalFilterOnly}&quot;&#10;&#9;&#9;&#9;&#9;globalFilterFunction=&quot;#{cc.attrs.globalFilterFunction}&quot;&#10;&#9;&#9;&#9;&#9;lazy=&quot;#{cc.attrs.lazy}&quot; liveResize=&quot;#{cc.attrs.liveResize}&quot;&#10;&#9;&#9;&#9;&#9;liveScroll=&quot;#{cc.attrs.liveScroll}&quot;&#10;&#9;&#9;&#9;&#9;liveScrollBuffer=&quot;#{cc.attrs.liveScrollBuffer}&quot;&#10;&#9;&#9;&#9;&#9;initMode=&quot;#{cc.attrs.initMode}&quot;&#10;&#9;&#9;&#9;&#9;nativeElements=&quot;#{cc.attrs.nativeElements}&quot;&#10;&#9;&#9;&#9;&#9;onExpandStart=&quot;#{cc.attrs.onExpandStart}&quot;&#10;&#9;&#9;&#9;&#9;onRowClick=&quot;#{cc.attrs.onRowClick}&quot;&#10;&#9;&#9;&#9;&#9;pageLinks=&quot;#{cc.attrs.pageLinks}&quot;&#10;&#9;&#9;&#9;&#9;paginatorAlwaysVisible=&quot;#{cc.attrs.paginatorAlwaysVisible}&quot;&#10;&#9;&#9;&#9;&#9;paginatorPosition=&quot;#{cc.attrs.paginatorPosition}&quot;&#10;&#9;&#9;&#9;&#9;paginatorTemplate=&quot;#{cc.attrs.paginatorTemplate}&quot;&#10;&#9;&#9;&#9;&#9;reflow=&quot;#{cc.attrs.reflow}&quot; rendered=&quot;#{cc.attrs.rendered}&quot;&#10;&#9;&#9;&#9;&#9;renderEmptyFacets=&quot;#{cc.attrs.renderEmptyFacets}&quot;&#10;&#9;&#9;&#9;&#9;resizableColumns=&quot;#{cc.attrs.resizableColumns}&quot;&#10;&#9;&#9;&#9;&#9;resizeMode=&quot;#{cc.attrs.resizeMode}&quot;&#10;&#9;&#9;&#9;&#9;rowDragSelector=&quot;#{cc.attrs.rowDragSelector}&quot;&#10;&#9;&#9;&#9;&#9;rowEditMode=&quot;#{cc.attrs.rowEditMode}&quot;&#10;&#9;&#9;&#9;&#9;rowExpandMode=&quot;#{cc.attrs.rowExpandMode}&quot;&#10;&#9;&#9;&#9;&#9;rowHover=&quot;#{cc.attrs.rowHover}&quot;&#10;&#9;&#9;&#9;&#9;rowIndexVar=&quot;#{cc.attrs.rowIndexVar}&quot;&#10;&#9;&#9;&#9;&#9;rowSelectMode=&quot;#{cc.attrs.rowSelectMode}&quot;&#10;&#9;&#9;&#9;&#9;rowSelector=&quot;#{cc.attrs.rowSelector}&quot;&#10;&#9;&#9;&#9;&#9;rowStatePreserved=&quot;#{cc.attrs.rowStatePreserved}&quot;&#10;&#9;&#9;&#9;&#9;rowStyleClass=&quot;#{cc.attrs.rowStyleClass}&quot;&#10;&#9;&#9;&#9;&#9;rowsPerPageLabel=&quot;#{cc.attrs.rowsPerPageLabel}&quot;&#10;&#9;&#9;&#9;&#9;rowsPerPageTemplate=&quot;#{cc.attrs.rowsPerPageTemplate}&quot;&#10;&#9;&#9;&#9;&#9;saveOnCellBlur=&quot;#{cc.attrs.saveOnCellBlur}&quot;&#10;&#9;&#9;&#9;&#9;scrollHeight=&quot;#{cc.attrs.scrollHeight}&quot;&#10;&#9;&#9;&#9;&#9;scrollRows=&quot;#{cc.attrs.scrollRows}&quot;&#10;&#9;&#9;&#9;&#9;scrollWidth=&quot;#{cc.attrs.scrollWidth}&quot;&#10;&#9;&#9;&#9;&#9;scrollable=&quot;#{cc.attrs.scrollable}&quot;&#10;&#9;&#9;&#9;&#9;selectionPageOnly=&quot;#{cc.attrs.selectionPageOnly}&quot;&#10;&#9;&#9;&#9;&#9;showGridlines=&quot;#{cc.attrs.showGridlines}&quot;&#10;&#9;&#9;&#9;&#9;showSelectAll=&quot;#{cc.attrs.showSelectAll}&quot; size=&quot;#{cc.attrs.size}&quot;&#10;&#9;&#9;&#9;&#9;sortBy=&quot;#{cc.attrs.sortBy}&quot; skipChildren=&quot;#{cc.attrs.skipChildren}&quot;&#10;&#9;&#9;&#9;&#9;stickyHeader=&quot;#{cc.attrs.stickyHeader}&quot;&#10;&#9;&#9;&#9;&#9;stickyTopAt=&quot;#{cc.attrs.stickyTopAt}&quot;&#10;&#9;&#9;&#9;&#9;stripedRows=&quot;#{cc.attrs.stripedRows}&quot; style=&quot;#{cc.attrs.style}&quot;&#10;&#9;&#9;&#9;&#9;styleClass=&quot;#{cc.attrs.styleClass}&quot; summary=&quot;#{cc.attrs.summary}&quot;&#10;&#9;&#9;&#9;&#9;tabindex=&quot;#{cc.attrs.tabindex}&quot; tableStyle=&quot;#{cc.attrs.tableStyle}&quot;&#10;&#9;&#9;&#9;&#9;tableStyleClass=&quot;#{cc.attrs.tableStyleClass}&quot;&#10;&#9;&#9;&#9;&#9;virtualScroll=&quot;#{cc.attrs.virtualScroll}&quot;&#10;&#9;&#9;&#9;&#9;touchable=&quot;#{cc.attrs.touchable}&quot;&#10;&#9;&#9;&#9;&#9;partialUpdate=&quot;#{cc.attrs.partialUpdate}&quot;&gt;&#10;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;event&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertChildren /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;header&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;footer&quot; /&gt;&#10;&#10;&#9;&#9;&#9;&lt;/p:dataTable&gt;&#10;&#9;&#9;&lt;/c:when&gt;&#10;&#9;&#9;&lt;c:otherwise&gt;&#10;&#9;&#9;&#9;&lt;p:dataTable id=&quot;#{cc.attrs.tableId}&quot;&#10;&#9;&#9;&#9;&#9;widgetVar=&quot;#{cc.attrs.widgetVar}&quot; value=&quot;#{cc.attrs.value}&quot;&#10;&#9;&#9;&#9;&#9;var=&quot;item&quot; multiViewState=&quot;true&quot; paginator=&quot;#{cc.attrs.paginator}&quot;&#10;&#9;&#9;&#9;&#9;rows=&quot;#{cc.attrs.rows}&quot; rowKey=&quot;#{cc.attrs.rowKey}&quot;&#10;&#9;&#9;&#9;&#9;sortMode=&quot;#{cc.attrs.sortMode}&quot;&#10;&#9;&#9;&#9;&#9;emptyMessage=&quot;#{cc.attrs.emptyMessage}&quot;&#10;&#9;&#9;&#9;&#9;allowUnsorting=&quot;#{allowUnsorting}&quot; ariaRowLabel=&quot;#{ariaRowLabel}&quot;&#10;&#9;&#9;&#9;&#9;binding=&quot;#{cc.attrs.binding}&quot;&#10;&#9;&#9;&#9;&#9;cellEditMode=&quot;#{cc.attrs.cellEditMode}&quot;&#10;&#9;&#9;&#9;&#9;cellSeparator=&quot;#{cc.attrs.cellSeparator}&quot;&#10;&#9;&#9;&#9;&#9;clientCache=&quot;#{cc.attrs.clientCache}&quot;&#10;&#9;&#9;&#9;&#9;currentPageReportTemplate=&quot;#{cc.attrs.currentPageReportTemplate}&quot;&#10;&#9;&#9;&#9;&#9;dataLocale=&quot;#{cc.attrs.dataLocale}&quot; dir=&quot;#{cc.attrs.dir}&quot;&#10;&#9;&#9;&#9;&#9;disableContextMenuIfEmpty=&quot;#{cc.attrs.disableContextMenuIfEmpty}&quot;&#10;&#9;&#9;&#9;&#9;disabledSelection=&quot;#{cc.attrs.disabledSelection}&quot;&#10;&#9;&#9;&#9;&#9;disabledTextSelection=&quot;#{cc.attrs.disabledTextSelection}&quot;&#10;&#9;&#9;&#9;&#9;draggableColumns=&quot;#{cc.attrs.draggableColumns}&quot;&#10;&#9;&#9;&#9;&#9;draggableRows=&quot;#{cc.attrs.draggableRows}&quot;&#10;&#9;&#9;&#9;&#9;draggableRowsFunction=&quot;#{cc.attrs.draggableRowsFunction}&quot;&#10;&#9;&#9;&#9;&#9;editInitEvent=&quot;#{cc.attrs.editInitEvent}&quot;&#10;&#9;&#9;&#9;&#9;editMode=&quot;#{cc.attrs.editMode}&quot; editable=&quot;#{cc.attrs.editable}&quot;&#10;&#9;&#9;&#9;&#9;editingRow=&quot;#{cc.attrs.editingRow}&quot;&#10;&#9;&#9;&#9;&#9;escapeText=&quot;#{cc.attrs.escapeText}&quot;&#10;&#9;&#9;&#9;&#9;expandedRow=&quot;#{cc.attrs.expandedRow}&quot;&#10;&#9;&#9;&#9;&#9;filterBy=&quot;#{cc.attrs.filterBy}&quot;&#10;&#9;&#9;&#9;&#9;filterDelay=&quot;#{cc.attrs.filterDelay}&quot;&#10;&#9;&#9;&#9;&#9;filterEvent=&quot;#{cc.attrs.filterEvent}&quot;&#10;&#9;&#9;&#9;&#9;filteredValue=&quot;#{cc.attrs.filteredValue}&quot; first=&quot;#{cc.attrs.first}&quot;&#10;&#9;&#9;&#9;&#9;frozenColumns=&quot;#{cc.attrs.frozenColumns}&quot;&#10;&#9;&#9;&#9;&#9;frozenRows=&quot;#{cc.attrs.frozenRows}&quot;&#10;&#9;&#9;&#9;&#9;globalFilter=&quot;#{cc.attrs.globalFilter}&quot;&#10;&#9;&#9;&#9;&#9;globalFilterOnly=&quot;#{cc.attrs.globalFilterOnly}&quot;&#10;&#9;&#9;&#9;&#9;globalFilterFunction=&quot;#{cc.attrs.globalFilterFunction}&quot;&#10;&#9;&#9;&#9;&#9;lazy=&quot;#{cc.attrs.lazy}&quot; liveResize=&quot;#{cc.attrs.liveResize}&quot;&#10;&#9;&#9;&#9;&#9;liveScroll=&quot;#{cc.attrs.liveScroll}&quot;&#10;&#9;&#9;&#9;&#9;liveScrollBuffer=&quot;#{cc.attrs.liveScrollBuffer}&quot;&#10;&#9;&#9;&#9;&#9;initMode=&quot;#{cc.attrs.initMode}&quot;&#10;&#9;&#9;&#9;&#9;nativeElements=&quot;#{cc.attrs.nativeElements}&quot;&#10;&#9;&#9;&#9;&#9;onExpandStart=&quot;#{cc.attrs.onExpandStart}&quot;&#10;&#9;&#9;&#9;&#9;onRowClick=&quot;#{cc.attrs.onRowClick}&quot;&#10;&#9;&#9;&#9;&#9;pageLinks=&quot;#{cc.attrs.pageLinks}&quot;&#10;&#9;&#9;&#9;&#9;paginatorAlwaysVisible=&quot;#{cc.attrs.paginatorAlwaysVisible}&quot;&#10;&#9;&#9;&#9;&#9;paginatorPosition=&quot;#{cc.attrs.paginatorPosition}&quot;&#10;&#9;&#9;&#9;&#9;paginatorTemplate=&quot;#{cc.attrs.paginatorTemplate}&quot;&#10;&#9;&#9;&#9;&#9;reflow=&quot;#{cc.attrs.reflow}&quot; rendered=&quot;#{cc.attrs.rendered}&quot;&#10;&#9;&#9;&#9;&#9;renderEmptyFacets=&quot;#{cc.attrs.renderEmptyFacets}&quot;&#10;&#9;&#9;&#9;&#9;resizableColumns=&quot;#{cc.attrs.resizableColumns}&quot;&#10;&#9;&#9;&#9;&#9;resizeMode=&quot;#{cc.attrs.resizeMode}&quot;&#10;&#9;&#9;&#9;&#9;rowDragSelector=&quot;#{cc.attrs.rowDragSelector}&quot;&#10;&#9;&#9;&#9;&#9;rowEditMode=&quot;#{cc.attrs.rowEditMode}&quot;&#10;&#9;&#9;&#9;&#9;rowExpandMode=&quot;#{cc.attrs.rowExpandMode}&quot;&#10;&#9;&#9;&#9;&#9;rowHover=&quot;#{cc.attrs.rowHover}&quot;&#10;&#9;&#9;&#9;&#9;rowIndexVar=&quot;#{cc.attrs.rowIndexVar}&quot;&#10;&#9;&#9;&#9;&#9;rowSelectMode=&quot;#{cc.attrs.rowSelectMode}&quot;&#10;&#9;&#9;&#9;&#9;rowSelector=&quot;#{cc.attrs.rowSelector}&quot;&#10;&#9;&#9;&#9;&#9;rowStatePreserved=&quot;#{cc.attrs.rowStatePreserved}&quot;&#10;&#9;&#9;&#9;&#9;rowStyleClass=&quot;#{cc.attrs.rowStyleClass}&quot;&#10;&#9;&#9;&#9;&#9;rowsPerPageLabel=&quot;#{cc.attrs.rowsPerPageLabel}&quot;&#10;&#9;&#9;&#9;&#9;rowsPerPageTemplate=&quot;#{cc.attrs.rowsPerPageTemplate}&quot;&#10;&#9;&#9;&#9;&#9;saveOnCellBlur=&quot;#{cc.attrs.saveOnCellBlur}&quot;&#10;&#9;&#9;&#9;&#9;scrollHeight=&quot;#{cc.attrs.scrollHeight}&quot;&#10;&#9;&#9;&#9;&#9;scrollRows=&quot;#{cc.attrs.scrollRows}&quot;&#10;&#9;&#9;&#9;&#9;scrollWidth=&quot;#{cc.attrs.scrollWidth}&quot;&#10;&#9;&#9;&#9;&#9;scrollable=&quot;#{cc.attrs.scrollable}&quot;&#10;&#9;&#9;&#9;&#9;showGridlines=&quot;#{cc.attrs.showGridlines}&quot;&#10;&#9;&#9;&#9;&#9;showSelectAll=&quot;#{cc.attrs.showSelectAll}&quot; size=&quot;#{cc.attrs.size}&quot;&#10;&#9;&#9;&#9;&#9;sortBy=&quot;#{cc.attrs.sortBy}&quot; skipChildren=&quot;#{cc.attrs.skipChildren}&quot;&#10;&#9;&#9;&#9;&#9;stickyHeader=&quot;#{cc.attrs.stickyHeader}&quot;&#10;&#9;&#9;&#9;&#9;stickyTopAt=&quot;#{cc.attrs.stickyTopAt}&quot;&#10;&#9;&#9;&#9;&#9;stripedRows=&quot;#{cc.attrs.stripedRows}&quot; style=&quot;#{cc.attrs.style}&quot;&#10;&#9;&#9;&#9;&#9;styleClass=&quot;#{cc.attrs.styleClass}&quot; summary=&quot;#{cc.attrs.summary}&quot;&#10;&#9;&#9;&#9;&#9;tabindex=&quot;#{cc.attrs.tabindex}&quot; tableStyle=&quot;#{cc.attrs.tableStyle}&quot;&#10;&#9;&#9;&#9;&#9;tableStyleClass=&quot;#{cc.attrs.tableStyleClass}&quot;&#10;&#9;&#9;&#9;&#9;virtualScroll=&quot;#{cc.attrs.virtualScroll}&quot;&#10;&#9;&#9;&#9;&#9;touchable=&quot;#{cc.attrs.touchable}&quot;&#10;&#9;&#9;&#9;&#9;partialUpdate=&quot;#{cc.attrs.partialUpdate}&quot;&gt;&#10;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;event&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertChildren /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;header&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&lt;cc:insertFacet name=&quot;footer&quot; /&gt;&#10;&#10;&#9;&#9;&#9;&lt;/p:dataTable&gt;&#10;&#9;&#9;&lt;/c:otherwise&gt;&#10;&#9;&lt;/c:choose&gt;&#10;&#10;&lt;/cc:implementation&gt;&#10;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>